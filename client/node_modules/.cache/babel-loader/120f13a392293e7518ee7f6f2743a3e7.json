{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport { Link } from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\nimport Cookies from 'universal-cookie';\n\nfunction reverseString(s) {\n  return s.split(\"\").reverse().join(\"\");\n}\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _this.commitClearPrivateMessage = function (conversationId) {\n      _this.privateMessages[conversationId].clearCommitsCount++;\n      if (_this.privateMessages[conversationId].clearCommitsCount >= 2) _this.privateMessages[conversationId].arr = [];\n    };\n\n    _this.connectToRoom = function (nickname) {\n      var socket = openSocket(\"http://127.0.0.1:5000?nickname=\".concat(nickname));\n      socket.on('cookiesReceived', function (message) {\n        _this.cookies.set('id', message.data.id);\n\n        _this.cookies.set('nickname', message.data.nickname);\n\n        _this.cookies.set('avatar', message.data.avatar);\n      });\n      socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'connected\\' channel:', message);\n        if (!_this.state.sessionId) _this.setState({\n          sessionId: _this.cookies.get('id')\n        });\n\n        _this.setState({\n          usersOnline: message.data.usersOnline\n        });\n\n        _this.roomMessages.push(message); // if (window.location.pathname === '/')\n\n\n        if (_this.state.currentNav === '') _this.setState({\n          messages: _this.roomMessages,\n          sockets: _this.state.sockets.concat(socket),\n          currentSocket: socket\n        });\n\n        _this.updateNav({\n          navName: _this._ROOM_NAV_NAME,\n          messagesStore: _this._ROOM_MESSAGE_STORE,\n          socket: socket\n        });\n      });\n      socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n        _this.roomMessages.push(message); // if (window.location.pathname === '/')\n\n\n        if (_this.state.currentNav === '') _this.setState({\n          messages: _this.roomMessages\n        });\n      });\n      socket.on('join', function (message) {\n        console.log('Websocket: broadcast from \\'join\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n        var partner = {\n          id: message.data.id,\n          nickname: message.data.navName\n        };\n\n        _this.connectToPrivate(partner, true);\n      });\n      socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'userDisconnected\\' channel:', message);\n\n        _this.setState({\n          usersOnline: message.data.usersOnline\n        });\n\n        _this.roomMessages.push(message); // if (window.location.pathname === '/')\n\n\n        if (_this.state.currentNav === '') _this.setState({\n          messages: _this.roomMessages\n        });\n      });\n    };\n\n    _this.connectToPrivate = function (partner) {\n      var isReverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var conversationId = _this.cookies.get('id') + '-' + partner.id;\n      if (isReverse) conversationId = reverseString(conversationId);\n      var socket = openSocket(\"http://127.0.0.1:5000?conversationId=\".concat(conversationId, \"&id=\").concat(_this.cookies.get('id'), \"\\n        &nickname=\").concat(_this.cookies.get('nickname'), \"&avatar=\").concat(_this.cookies.get('avatar')));\n      socket.on('established', function (message) {\n        console.log('Websocket: broadcast \\'established\\' channel:', message);\n\n        _this.updateNav({\n          navName: partner.nickname,\n          messagesStore: conversationId,\n          socket: socket\n        });\n\n        if (!_this.privateMessages[conversationId]) {\n          _this.privateMessages[conversationId] = {\n            arr: [],\n            clearCommitsCount: 0\n          };\n        }\n\n        _this.privateMessages[conversationId].arr.push(message); // if (window.location.pathname === `/${conversationId}`)\n\n\n        if (_this.state.currentNav === conversationId) _this.setState({\n          messages: _this.privateMessages[conversationId].arr,\n          currentSocket: socket\n        });\n      });\n      socket.on('privateMessage', function (message) {\n        console.log('Websocket: broadcast from \\'privateMessage\\' channel:', message);\n        if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = {\n          arr: [],\n          clearCommitsCount: 0\n        };\n\n        _this.privateMessages[conversationId].arr.push(message); // if (window.location.pathname === `/${conversationId}`)\n\n\n        if (_this.state.currentNav === conversationId) _this.setState({\n          messages: _this.privateMessages[conversationId].arr\n        });\n      });\n      socket.on('demolished', function (message) {\n        console.log('Websocket: broadcast from \\'demolished\\' channel:', message);\n\n        _this.privateMessages[conversationId].arr.push(message); // if (window.location.pathname === `/${conversationId}`)\n\n\n        if (_this.state.currentNav === conversationId) _this.setState({\n          messages: _this.privateMessages[conversationId].arr\n        });\n\n        _this.commitClearPrivateMessage(conversationId); // this.privateMessages[conversationId] = [];\n        // this.state.currentSocket.disconnect()\n\n      });\n    };\n\n    _this.sendToServer = function (text) {\n      var message = {\n        data: {\n          nickname: _this.cookies.get('nickname'),\n          avatar: _this.cookies.get('avatar')\n        },\n        text: text\n      };\n\n      _this.state.currentSocket.emit('message', message);\n    };\n\n    _this.updateNav = function (nav) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.state.nav[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var navSaved = _step.value;\n          if (navSaved.messagesStore === nav.messagesStore) return;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      nav.active = false;\n\n      _this.setState({\n        nav: _this.state.nav.concat(nav)\n      });\n    };\n\n    _this.handleClickNav = function (item) {\n      if (item.messagesStore === _this._ROOM_MESSAGE_STORE) _this.setState({\n        messages: _this.roomMessages\n      });else _this.setState({\n        messages: _this.privateMessages[item.messagesStore].arr\n      });\n\n      _this.setState({\n        currentSocket: item.socket\n      });\n\n      var newNav = _this.state.nav.map(function (elem) {\n        elem.active = item.messagesStore === elem.messagesStore;\n        return elem;\n      });\n\n      _this.setState({\n        nav: newNav,\n        currentNav: item.navName === _this._ROOM_NAV_NAME ? '' : item.messagesStore\n      });\n    };\n\n    _this.handleCloseNav = function (divId) {\n      _this.state.currentSocket.disconnect(); // console.log('CUR_SOCKET', this.state.currentSocket);\n\n\n      var newNav = _this.state.nav.filter(function (item) {\n        console.log(item.messagesStore, divId);\n        return item.messagesStore !== divId;\n      });\n\n      var lastItem = newNav[newNav.length - 1];\n      console.log('LAST_ITEm', lastItem);\n\n      _this.handleClickNav(lastItem);\n\n      _this.setState({\n        nav: newNav\n      });\n    };\n\n    _this.cookies = new Cookies();\n    _this._ROOM_NAV_NAME = 'ROOM';\n    _this._ROOM_MESSAGE_STORE = 'ROOM';\n    _this.roomMessages = [];\n    _this.privateMessages = {};\n    _this.state = {\n      sockets: [],\n      currentSocket: null,\n      nav: [],\n      usersOnline: [],\n      messages: [],\n      currentNav: ''\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log('CUR_NAV', this.state.currentNav);\n      var nav = this.state.nav.map(function (item, i) {\n        var itemId = item.messagesStore;\n\n        if (itemId.indexOf('-') !== -1) {\n          itemId = itemId.split('-').join('_');\n        }\n\n        var navStyle = {\n          display: 'flex',\n          justifyContent: 'center',\n          marginLeft: '5px',\n          marginRight: '5px',\n          paddingLeft: '5px',\n          paddingRight: '5px',\n          border: item.active ? 'black 1px solid' : ''\n        };\n        return React.createElement(\"div\", {\n          id: item.messagesStore,\n          style: navStyle,\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"nav-item nav-link\",\n          onClick: function onClick() {\n            return _this2.handleClickNav(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, item.navName), React.createElement(\"a\", {\n          href: '#',\n          style: {\n            textDecoration: 'none',\n            color: 'black'\n          },\n          onClick: function onClick() {\n            return _this2.handleCloseNav(item.messagesStore);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        }, \"\\xD7\"));\n      });\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        user.nickname += user.id === parseInt(_this2.cookies.get('id')) && user.nickname.indexOf('(Вы)') === -1 ? ' (Вы)' : '';\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          sessionId: _this2.state.sessionId,\n          roomName: _this2._ROOM_NAV_NAME,\n          connectToPrivate: _this2.connectToPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-expand-lg navbar-light bg-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"Chat\")), React.createElement(\"button\", {\n        className: \"navbar-toggler\",\n        type: \"button\",\n        \"data-toggle\": \"collapse\",\n        \"data-target\": \"#navbarNavAltMarkup\",\n        \"aria-controls\": \"navbarNavAltMarkup\",\n        \"aria-expanded\": \"false\",\n        \"aria-label\": \"Toggle navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"navbar-toggler-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"collapse navbar-collapse\",\n        id: \"navbarNavAltMarkup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, nav))), React.createElement(Login, {\n        connectToRoom: this.connectToRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"usersOnlineStyle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, \"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0438 \\u0432 \\u043A\\u043E\\u043C\\u043D\\u0430\\u0442\\u0435 \\\"\", this._ROOM_NAV_NAME, \"\\\": \"), usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        currentSocket: this.state.currentSocket,\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UserOnline","Link","openSocket","Cookies","reverseString","s","split","reverse","join","Chat","props","commitClearPrivateMessage","conversationId","privateMessages","clearCommitsCount","arr","connectToRoom","nickname","socket","on","message","cookies","set","data","id","avatar","console","log","state","sessionId","setState","get","usersOnline","roomMessages","push","currentNav","messages","sockets","concat","currentSocket","updateNav","navName","_ROOM_NAV_NAME","messagesStore","_ROOM_MESSAGE_STORE","partner","connectToPrivate","isReverse","sendToServer","text","emit","nav","navSaved","active","handleClickNav","item","newNav","map","elem","handleCloseNav","divId","disconnect","filter","lastItem","length","i","itemId","indexOf","navStyle","display","justifyContent","marginLeft","marginRight","paddingLeft","paddingRight","border","textDecoration","color","user","parseInt","fontWeight","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport {Link} from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\nimport Cookies from 'universal-cookie';\n\nfunction reverseString(s){\n    return s.split(\"\").reverse().join(\"\");\n}\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.cookies = new Cookies();\n        this._ROOM_NAV_NAME = 'ROOM';\n        this._ROOM_MESSAGE_STORE = 'ROOM';\n        this.roomMessages = [];\n        this.privateMessages = {};\n        this.state = {\n            sockets: [],\n            currentSocket: null,\n            nav: [],\n            usersOnline: [],\n            messages: [],\n            currentNav: ''\n        };\n    }\n\n    commitClearPrivateMessage = (conversationId) => {\n        this.privateMessages[conversationId].clearCommitsCount++;\n        if (this.privateMessages[conversationId].clearCommitsCount >= 2)\n            this.privateMessages[conversationId].arr = [];\n    };\n\n    connectToRoom = (nickname) => {\n        const socket = openSocket(`http://127.0.0.1:5000?nickname=${nickname}`);\n        socket.on('cookiesReceived', message => {\n            this.cookies.set('id', message.data.id);\n            this.cookies.set('nickname', message.data.nickname);\n            this.cookies.set('avatar', message.data.avatar);\n        });\n        socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'connected\\' channel:', message);\n            if (!this.state.sessionId)\n                this.setState({sessionId: this.cookies.get('id')});\n            this.setState({usersOnline: message.data.usersOnline});\n            this.roomMessages.push(message);\n            // if (window.location.pathname === '/')\n            if (this.state.currentNav === '')\n                this.setState({\n                    messages: this.roomMessages,\n                    sockets: this.state.sockets.concat(socket),\n                    currentSocket: socket,\n                });\n            this.updateNav({\n                navName: this._ROOM_NAV_NAME,\n                messagesStore: this._ROOM_MESSAGE_STORE,\n                socket,\n            });\n        });\n        socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n            this.roomMessages.push(message);\n            // if (window.location.pathname === '/')\n            if (this.state.currentNav === '')\n                this.setState({\n                    messages: this.roomMessages,\n                });\n        });\n        socket.on('join', (message) => {\n            console.log('Websocket: broadcast from \\'join\\' channel:', message);\n            // this.updateUsersOnline(message.data.usersOnline);\n            let partner = {\n                id: message.data.id,\n                nickname: message.data.navName\n            };\n            this.connectToPrivate(partner, true)\n        });\n        socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'userDisconnected\\' channel:', message);\n            this.setState({usersOnline: message.data.usersOnline});\n            this.roomMessages.push(message);\n            // if (window.location.pathname === '/')\n            if (this.state.currentNav === '')\n                this.setState({\n                    messages: this.roomMessages,\n                });\n        });\n    };\n    connectToPrivate = (partner, isReverse=false) => {\n        let conversationId = (this.cookies.get('id') + '-' + partner.id);\n        if (isReverse)\n            conversationId = reverseString(conversationId);\n        const socket = openSocket(`http://127.0.0.1:5000?conversationId=${conversationId}&id=${this.cookies.get('id')}\n        &nickname=${this.cookies.get('nickname')}&avatar=${this.cookies.get('avatar')}`);\n        socket.on('established', (message) => {\n            console.log('Websocket: broadcast \\'established\\' channel:', message);\n            this.updateNav({\n                navName: partner.nickname,\n                messagesStore: conversationId,\n                socket,\n            });\n            if (!this.privateMessages[conversationId]) {\n                this.privateMessages[conversationId] = {\n                    arr: [],\n                    clearCommitsCount: 0\n                }\n            }\n            this.privateMessages[conversationId].arr.push(message);\n            // if (window.location.pathname === `/${conversationId}`)\n            if (this.state.currentNav === conversationId)\n                this.setState({\n                    messages: this.privateMessages[conversationId].arr,\n                    currentSocket: socket\n                });\n        });\n        socket.on('privateMessage', (message) => {\n            console.log('Websocket: broadcast from \\'privateMessage\\' channel:', message);\n            if (!this.privateMessages[conversationId])\n                this.privateMessages[conversationId] = {\n                    arr: [],\n                    clearCommitsCount: 0\n                };\n            this.privateMessages[conversationId].arr.push(message);\n            // if (window.location.pathname === `/${conversationId}`)\n            if (this.state.currentNav === conversationId)\n                this.setState({\n                    messages: this.privateMessages[conversationId].arr,\n                });\n        });\n        socket.on('demolished', (message) => {\n            console.log('Websocket: broadcast from \\'demolished\\' channel:', message);\n            this.privateMessages[conversationId].arr.push(message);\n            // if (window.location.pathname === `/${conversationId}`)\n            if (this.state.currentNav === conversationId)\n                this.setState({\n                    messages: this.privateMessages[conversationId].arr,\n                });\n            this.commitClearPrivateMessage(conversationId);\n            // this.privateMessages[conversationId] = [];\n            // this.state.currentSocket.disconnect()\n        });\n    };\n    sendToServer = (text) => {\n        let message = {\n            data: {\n                nickname: this.cookies.get('nickname'),\n                avatar: this.cookies.get('avatar')\n            },\n            text\n        };\n        this.state.currentSocket.emit('message', message);\n    };\n    updateNav = (nav) => {\n        for (let navSaved of this.state.nav) {\n            if (navSaved.messagesStore === nav.messagesStore)\n                return;\n        }\n        nav.active = false;\n        this.setState({nav: this.state.nav.concat(nav)})\n    };\n\n    handleClickNav = (item) => {\n        if (item.messagesStore === this._ROOM_MESSAGE_STORE)\n            this.setState({\n                messages: this.roomMessages\n            });\n        else this.setState({\n            messages: this.privateMessages[item.messagesStore].arr\n        });\n        this.setState({currentSocket: item.socket});\n        let newNav = this.state.nav.map(elem => {\n            elem.active = item.messagesStore === elem.messagesStore;\n            return elem;\n        });\n        this.setState({\n            nav: newNav,\n            currentNav: item.navName === this._ROOM_NAV_NAME? '': item.messagesStore\n        });\n    };\n\n    handleCloseNav = (divId) => {\n        this.state.currentSocket.disconnect();\n        // console.log('CUR_SOCKET', this.state.currentSocket);\n        let newNav = this.state.nav.filter(item => {\n            console.log(item.messagesStore, divId);\n            return item.messagesStore !== divId\n        });\n        let lastItem = newNav[newNav.length-1];\n        console.log('LAST_ITEm', lastItem);\n        this.handleClickNav(lastItem);\n        this.setState({nav: newNav});\n\n    };\n\n    render() {\n        console.log('CUR_NAV', this.state.currentNav);\n        const nav = this.state.nav.map((item, i) => {\n            let itemId = item.messagesStore;\n            if (itemId.indexOf('-') !== -1) {\n                itemId = itemId.split('-').join('_');\n            }\n            const navStyle = {\n                display: 'flex',\n                justifyContent: 'center',\n                marginLeft: '5px',\n                marginRight: '5px',\n                paddingLeft: '5px',\n                paddingRight: '5px',\n                border: item.active? 'black 1px solid': ''\n            };\n            return (\n                <div id={item.messagesStore} style={navStyle} key={i}>\n                    <button className=\"nav-item nav-link\"\n                          onClick={() => this.handleClickNav(item)}>{item.navName}</button>\n                    <a href={'#'} style={{textDecoration: 'none', color:'black'}}\n                       onClick={() => this.handleCloseNav(item.messagesStore)}>&times;</a>\n                </div>\n            )\n        });\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            user.nickname += user.id === parseInt(this.cookies.get('id')) && user.nickname.indexOf('(Вы)') === -1? ' (Вы)': '';\n\n            return <UserOnline key={i} user={user} sessionId={this.state.sessionId} roomName={this._ROOM_NAV_NAME}\n                               connectToPrivate={this.connectToPrivate} />\n        });\n        return(\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <a className=\"navbar-brand\" href=\"#\">\n                        <h3>Chat</h3>\n                    </a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\"\n                            aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                        <div className=\"navbar-nav\">\n                            {nav}\n                        </div>\n                    </div>\n                </nav>\n                <Login connectToRoom={this.connectToRoom}/>\n                <div className='usersOnlineStyle'>\n                    <p style={{fontWeight: 'bold'}}>Пользователи в комнате \"{this._ROOM_NAV_NAME}\": </p>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages}/>\n                <ChatInput currentSocket={this.state.currentSocket} sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}