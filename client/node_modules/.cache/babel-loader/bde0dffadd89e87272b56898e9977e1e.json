{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\nvar ROOM_NAV_NAME = 'ROOM';\nvar ROOM_MESSAGE_STORE = 'ROOM';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _this.connectToRoom = function (person) {\n      var isPrivate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var socket = null;\n      var conversationId = null;\n\n      if (isPrivate === true) {\n        console.log(\"PRIVATE\");\n        fetch('/session/user').then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          conversationId = data.user.id + '-' + person.id;\n          socket = openSocket(\"http://localhost:5000/?isPrivate=true&conversationId=\".concat(conversationId));\n          socket.on('established', function (message) {\n            console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n            _this.updateNav({\n              navName: person.nickname,\n              messagesStore: conversationId,\n              socket: socket\n            });\n\n            if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = [];\n\n            _this.privateMessages[conversationId].push(message);\n\n            _this.setState({\n              messages: _this.privateMessages[conversationId]\n            });\n          });\n          socket.on('message', function (message) {\n            console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n            if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = [];\n\n            _this.privateMessages[conversationId].push(message);\n\n            _this.setState({\n              messages: _this.privateMessages[conversationId]\n            });\n          }); // this.socket.on('demolished', (message) => {\n          //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n          //     this.updateUsersOnline(message.data.usersOnline);\n          //     this.updateMessages(message);\n          // });\n        });\n      } else {\n        socket = openSocket('http://localhost:5000?nickname=' + person);\n        socket.on('userConnected', function (message) {\n          console.log('Websocket: broadcast from channel:', message);\n\n          _this.setState({\n            usersOnline: message.data.usersOnline\n          });\n\n          _this.roomMessages.push(message);\n\n          _this.setState({\n            messages: _this.roomMessages,\n            sockets: _this.state.sockets.concat(socket),\n            currentSocket: socket\n          });\n\n          _this.updateNav({\n            navName: ROOM_NAV_NAME,\n            messagesStore: ROOM_MESSAGE_STORE,\n            socket: socket\n          });\n        });\n        socket.on('message', function (message) {\n          console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n          _this.roomMessages.push(message);\n\n          _this.setState({\n            messages: _this.roomMessages\n          });\n        });\n        socket.on('userDisconnected', function (message) {\n          console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n\n          _this.setState({\n            usersOnline: message.data.usersOnline\n          });\n\n          _this.roomMessages.push(message);\n\n          _this.setState({\n            messages: _this.roomMessages\n          });\n        });\n      }\n    };\n\n    _this.connectToPrivate = function (partner) {\n      fetch('/session/user').then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        var conversationId = data.user.id + '-' + partner.id;\n        var socket = openSocket(\"http://localhost:5000/?isPrivate=true&conversationId=\".concat(conversationId));\n        socket.on('established', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n          _this.updateNav({\n            navName: partner.nickname,\n            messagesStore: conversationId,\n            socket: socket\n          });\n\n          if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = [];\n\n          _this.privateMessages[conversationId].push(message);\n\n          _this.setState({\n            messages: _this.privateMessages[conversationId]\n          });\n        });\n        socket.on('message', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n          if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = [];\n\n          _this.privateMessages[conversationId].push(message);\n\n          _this.setState({\n            messages: _this.privateMessages[conversationId]\n          });\n        }); // this.socket.on('demolished', (message) => {\n        //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n        //     this.updateUsersOnline(message.data.usersOnline);\n        //     this.updateMessages(message);\n        // });\n      });\n    };\n\n    _this.sendToServer = function (message) {\n      _this.state.currentSocket.emit('message', message);\n    };\n\n    _this.updateNav = function (nav) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.state.nav[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var navSaved = _step.value;\n          if (navSaved.messagesStore === nav.messagesStore) return;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.setState({\n        nav: _this.state.nav.concat(nav)\n      });\n    };\n\n    _this.roomMessages = [];\n    _this.privateMessages = {};\n    _this.state = {\n      sockets: [],\n      currentSocket: null,\n      nav: [],\n      usersOnline: [],\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log('NAV', this.state.nav);\n      console.log('CHAT', this.state.messages);\n      var nav = this.state.nav.map(function (item, i) {\n        return React.createElement(Link, {\n          to: '#',\n          className: \"nav-item nav-link\",\n          key: i,\n          onClick: function onClick() {\n            if (item.messagesStore === ROOM_MESSAGE_STORE) _this2.setState({\n              messages: _this2.roomMessages\n            });else _this2.setState({\n              messages: _this2.privateMessages[item.messagesStore]\n            });\n\n            _this2.setState({\n              currentSocket: item.socket\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, item.navName);\n      });\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          connectToPrivate: _this2.connectToPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-expand-lg navbar-light bg-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Chat\")), React.createElement(\"button\", {\n        className: \"navbar-toggler\",\n        type: \"button\",\n        \"data-toggle\": \"collapse\",\n        \"data-target\": \"#navbarNavAltMarkup\",\n        \"aria-controls\": \"navbarNavAltMarkup\",\n        \"aria-expanded\": \"false\",\n        \"aria-label\": \"Toggle navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"navbar-toggler-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"collapse navbar-collapse\",\n        id: \"navbarNavAltMarkup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, nav))), React.createElement(Login, {\n        connectToRoom: this.connectToRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"usersOnlineStyle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UserOnline","BrowserRouter","Router","Route","Switch","Redirect","Link","openSocket","ROOM_NAV_NAME","ROOM_MESSAGE_STORE","Chat","props","connectToRoom","person","isPrivate","socket","conversationId","console","log","fetch","then","res","json","data","user","id","on","message","updateNav","navName","nickname","messagesStore","privateMessages","push","setState","messages","usersOnline","roomMessages","sockets","state","concat","currentSocket","connectToPrivate","partner","sendToServer","emit","nav","navSaved","map","item","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport {BrowserRouter as Router, Route, Switch, Redirect, Link} from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\n\nconst ROOM_NAV_NAME = 'ROOM';\nconst ROOM_MESSAGE_STORE = 'ROOM';\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.roomMessages = [];\n        this.privateMessages = {};\n        this.state = {\n            sockets: [],\n            currentSocket: null,\n            nav: [],\n            usersOnline: [],\n            messages: [],\n        };\n    }\n\n    connectToRoom = (person, isPrivate=false) => {\n        let socket = null;\n        let conversationId = null;\n        if (isPrivate === true){\n            console.log(\"PRIVATE\")\n            fetch('/session/user').then(res => res.json()).then(data => {\n                conversationId = (data.user.id + '-' + person.id);\n                socket = openSocket(`http://localhost:5000/?isPrivate=true&conversationId=${conversationId}`);\n                socket.on('established', (message) => {\n                    console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message);\n                    // this.updateUsersOnline(message.data.usersOnline);\n                    this.updateNav({\n                        navName: person.nickname,\n                        messagesStore: conversationId,\n                        socket,\n                    });\n                    if (!this.privateMessages[conversationId])\n                        this.privateMessages[conversationId] = [];\n                    this.privateMessages[conversationId].push(message);\n                    this.setState({\n                        messages: this.privateMessages[conversationId],\n                    });\n                });\n                socket.on('message', (message) => {\n                    console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n                    if (!this.privateMessages[conversationId])\n                        this.privateMessages[conversationId] = [];\n                    this.privateMessages[conversationId].push(message);\n                    this.setState({\n                        messages: this.privateMessages[conversationId],\n                    });\n                });\n                // this.socket.on('demolished', (message) => {\n                //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n                //     this.updateUsersOnline(message.data.usersOnline);\n                //     this.updateMessages(message);\n                // });\n            });\n        }\n        else {\n            socket = openSocket('http://localhost:5000?nickname=' + person);\n            socket.on('userConnected', (message) => {\n                console.log('Websocket: broadcast from channel:', message);\n                this.setState({usersOnline: message.data.usersOnline});\n                this.roomMessages.push(message);\n                this.setState({\n                    messages: this.roomMessages,\n                    sockets: this.state.sockets.concat(socket),\n                    currentSocket: socket,\n                });\n                this.updateNav({\n                    navName: ROOM_NAV_NAME,\n                    messagesStore: ROOM_MESSAGE_STORE,\n                    socket,\n                });\n            });\n            socket.on('message', (message) => {\n                console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n                this.roomMessages.push(message);\n                this.setState({\n                    messages: this.roomMessages,\n                });\n            });\n            socket.on('userDisconnected', (message) => {\n                console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n                this.setState({usersOnline: message.data.usersOnline});\n                this.roomMessages.push(message);\n                this.setState({\n                    messages: this.roomMessages,\n                });\n            });\n        }\n    };\n    connectToPrivate = (partner) => {\n        fetch('/session/user').then(res => res.json()).then(data => {\n            const conversationId = (data.user.id + '-' + partner.id);\n            const socket = openSocket(`http://localhost:5000/?isPrivate=true&conversationId=${conversationId}`);\n            socket.on('established', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message);\n                // this.updateUsersOnline(message.data.usersOnline);\n                this.updateNav({\n                    navName: partner.nickname,\n                    messagesStore: conversationId,\n                    socket,\n                });\n                if (!this.privateMessages[conversationId])\n                    this.privateMessages[conversationId] = [];\n                this.privateMessages[conversationId].push(message);\n                this.setState({\n                    messages: this.privateMessages[conversationId],\n                });\n            });\n            socket.on('message', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n                if (!this.privateMessages[conversationId])\n                    this.privateMessages[conversationId] = [];\n                this.privateMessages[conversationId].push(message);\n                this.setState({\n                    messages: this.privateMessages[conversationId],\n                });\n            });\n            // this.socket.on('demolished', (message) => {\n            //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n            //     this.updateUsersOnline(message.data.usersOnline);\n            //     this.updateMessages(message);\n            // });\n        });\n    };\n    sendToServer =(message) => {\n        this.state.currentSocket.emit('message', message);\n    };\n    updateNav = (nav) => {\n        for (let navSaved of this.state.nav) {\n            if (navSaved.messagesStore === nav.messagesStore)\n                return;\n        }\n        this.setState({nav: this.state.nav.concat(nav)})\n    };\n\n    render() {\n        console.log('NAV', this.state.nav);\n        console.log('CHAT', this.state.messages);\n        const nav = this.state.nav.map((item, i) => {\n            return <Link to={'#'} className=\"nav-item nav-link\" key={i}\n                         onClick={()=>{\n                             if (item.messagesStore === ROOM_MESSAGE_STORE)\n                                 this.setState({\n                                     messages: this.roomMessages\n                                 });\n                             else this.setState({\n                                 messages: this.privateMessages[item.messagesStore]\n                             });\n                             this.setState({currentSocket: item.socket})\n                         }}>{item.navName}</Link>\n        });\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            return <UserOnline key={i} user={user}\n                               connectToPrivate={this.connectToPrivate} />\n        });\n        return(\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <a className=\"navbar-brand\" href=\"#\">\n                        <h3>Chat</h3>\n                    </a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\"\n                            aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                        <div className=\"navbar-nav\">\n                            {nav}\n                        </div>\n                    </div>\n                </nav>\n                <Login connectToRoom={this.connectToRoom}/>\n                <div className='usersOnlineStyle'>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages}/>\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}