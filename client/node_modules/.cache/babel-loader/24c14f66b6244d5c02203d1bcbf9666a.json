{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _this.connectToWS = function (nickname) {\n      _this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n\n      _this.socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n\n        _this.setState({\n          usersOnline: message.data.usersOnline\n        });\n\n        _this.setState({\n          messages: _this.state.messages.concat(message)\n        });\n\n        _this.updateNav({\n          navName: 'ROOM',\n          route: '/'\n        });\n      });\n\n      _this.socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n        _this.setState({\n          messages: _this.state.messages.concat(message),\n          partnerId: null\n        });\n      });\n\n      _this.socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n\n        _this.setState({\n          usersOnline: message.data.usersOnline\n        });\n\n        _this.setState({\n          messages: _this.state.messages.concat(message),\n          partnerId: null\n        });\n      });\n    };\n\n    _this.connectToPrivate = function (partner) {\n      fetch('/session/user').then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        console.log(data);\n        var conversationId = data.user.id + '-' + partner.id;\n        _this.socket = openSocket(\"http://localhost:5000/private?conversationId=\".concat(conversationId));\n\n        _this.socket.on('established', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n          _this.updateNav({\n            navName: partner.nickname,\n            route: _this.pathToPrivateChat + partner.nickname\n          });\n\n          if (!_this.privateMessages[partner.id]) _this.privateMessages[partner.id] = [];\n\n          _this.privateMessages[partner.id].push(message);\n\n          _this.setState({\n            messages: _this.privateMessages,\n            partnerId: partner.id\n          });\n        });\n\n        _this.socket.on('message', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n          if (!_this.privateMessages[partner.id]) _this.privateMessages[partner.id] = [];\n\n          _this.privateMessages[partner.id].push(message);\n\n          _this.setState({\n            messages: _this.privateMessages,\n            partnerId: partner.id\n          });\n        }); // this.socket.on('demolished', (message) => {\n        //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n        //     this.updateUsersOnline(message.data.usersOnline);\n        //     this.updateMessages(message);\n        // });\n\n      });\n    };\n\n    _this.sendToServer = function (message) {\n      _this.socket.emit('message', message);\n    };\n\n    _this.updateNav = function (nav) {\n      _this.setState({\n        nav: _this.state.nav.concat(nav)\n      });\n    };\n\n    _this.socket = null;\n    _this.pathToPrivateChat = '/private';\n    _this.roomMessages = [];\n    _this.privateMessages = {};\n    _this.state = {\n      nav: [],\n      usersOnline: [],\n      messages: [],\n      partnerId: null\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log('CHAT', this.state.privateMessages);\n      var nav = this.state.nav.map(function (item, i) {\n        return React.createElement(Link, {\n          to: '#',\n          className: \"nav-item nav-link\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, item.navName);\n      });\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          connectToPrivate: _this2.connectToPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-expand-lg navbar-light bg-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Chat\")), React.createElement(\"button\", {\n        className: \"navbar-toggler\",\n        type: \"button\",\n        \"data-toggle\": \"collapse\",\n        \"data-target\": \"#navbarNavAltMarkup\",\n        \"aria-controls\": \"navbarNavAltMarkup\",\n        \"aria-expanded\": \"false\",\n        \"aria-label\": \"Toggle navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"navbar-toggler-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"collapse navbar-collapse\",\n        id: \"navbarNavAltMarkup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, nav))), React.createElement(Login, {\n        connectToWS: this.connectToWS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"usersOnlineStyle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        partnerId: this.state.partnerId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UserOnline","BrowserRouter","Router","Route","Switch","Redirect","Link","openSocket","Chat","props","connectToWS","nickname","socket","on","message","console","log","setState","usersOnline","data","messages","state","concat","updateNav","navName","route","partnerId","connectToPrivate","partner","fetch","then","res","json","conversationId","user","id","pathToPrivateChat","privateMessages","push","sendToServer","emit","nav","roomMessages","map","item","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport {BrowserRouter as Router, Route, Switch, Redirect, Link} from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.socket = null;\n        this.pathToPrivateChat = '/private';\n        this.roomMessages = [];\n        this.privateMessages = {};\n        this.state = {\n            nav: [],\n            usersOnline: [],\n            messages: [],\n            partnerId: null\n        };\n    }\n\n    connectToWS = (nickname) => {\n        this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n        this.socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n            this.setState({usersOnline: message.data.usersOnline});\n            this.setState({messages: this.state.messages.concat(message)});\n            this.updateNav({\n                navName:'ROOM',\n                route: '/'\n            });\n        });\n        this.socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n            this.setState({\n                messages: this.state.messages.concat(message),\n                partnerId: null\n            });\n        });\n        this.socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n            this.setState({usersOnline: message.data.usersOnline});\n            this.setState({\n                messages: this.state.messages.concat(message),\n                partnerId: null\n            });\n        });\n    };\n    connectToPrivate = (partner) => {\n        fetch('/session/user').then(res => res.json()).then(data => {\n            console.log(data);\n            let conversationId = (data.user.id + '-' + partner.id);\n            this.socket = openSocket(`http://localhost:5000/private?conversationId=${conversationId}`);\n            this.socket.on('established', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message);\n                // this.updateUsersOnline(message.data.usersOnline);\n                this.updateNav({\n                    navName: partner.nickname,\n                    route: this.pathToPrivateChat+partner.nickname\n                });\n                if (!this.privateMessages[partner.id])\n                    this.privateMessages[partner.id] = [];\n                this.privateMessages[partner.id].push(message);\n                this.setState({\n                    messages: this.privateMessages,\n                    partnerId: partner.id\n                });\n            });\n            this.socket.on('message', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n                if (!this.privateMessages[partner.id])\n                    this.privateMessages[partner.id] = [];\n                this.privateMessages[partner.id].push(message);\n                this.setState({\n                    messages: this.privateMessages,\n                    partnerId: partner.id,\n                });\n            });\n            // this.socket.on('demolished', (message) => {\n            //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n            //     this.updateUsersOnline(message.data.usersOnline);\n            //     this.updateMessages(message);\n            // });\n        });\n    };\n    sendToServer =(message) => {\n        this.socket.emit('message', message);\n    };\n    updateNav = (nav) => {\n        this.setState({nav: this.state.nav.concat(nav)})\n    };\n\n    render() {\n        console.log('CHAT', this.state.privateMessages);\n        const nav = this.state.nav.map((item, i) => {\n            return <Link to={'#'} className=\"nav-item nav-link\"  key={i}>{item.navName}</Link>\n        });\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            return <UserOnline key={i} user={user}\n                               connectToPrivate={this.connectToPrivate} />\n        });\n        return(\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <a className=\"navbar-brand\" href=\"#\">\n                        <h3>Chat</h3>\n                    </a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\"\n                            aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                        <div className=\"navbar-nav\">\n                            {nav}\n                        </div>\n                    </div>\n                </nav>\n                <Login connectToWS={this.connectToWS}/>\n                <div className='usersOnlineStyle'>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages} partnerId={this.state.partnerId} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}