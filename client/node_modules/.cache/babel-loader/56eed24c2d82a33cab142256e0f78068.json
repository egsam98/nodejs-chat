{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Private.js\";\nimport React from 'react';\nimport openSocket from 'socket.io-client';\nimport { updateNav } from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport '../css/styles.css';\nimport UserOnline from \"./UserOnline\";\nimport { sendToServer, connectToWS } from \"../index\";\nvar pathToPrivateChat = '/private/';\n\nfunction connectToPrivate(partner) {\n  var _this = this;\n\n  fetch('/session/user').then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    console.log(data);\n    var conversationId = data.user.id + '-' + partner.id;\n    _this.socket = openSocket(\"http://localhost:5000/private?conversationId=\".concat(conversationId));\n\n    _this.socket.on('established', function (message) {\n      console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n      updateNav({\n        navName: partner.nickname,\n        route: pathToPrivateChat + partner.nickname\n      });\n\n      _this.updateMessages(message);\n    });\n\n    _this.socket.on('message', function (message) {\n      console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n\n      _this.updateMessages(message);\n    }); // this.socket.on('demolished', (message) => {\n    //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n    //     this.updateUsersOnline(message.data.usersOnline);\n    //     this.updateMessages(message);\n    // });\n\n  });\n}\n\nvar Private =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Private, _React$Component);\n\n  function Private(props) {\n    var _this2;\n\n    _classCallCheck(this, Private);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Private).call(this, props));\n    _this2.socket = null;\n    _this2.state = {\n      usersOnline: [],\n      messages: []\n    };\n    connectToPrivate = connectToPrivate.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.sendToServer = sendToServer.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    return _this2;\n  }\n\n  _createClass(Private, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var params = new URLSearchParams(this.props.location.search);\n      this.partner = {\n        id: params.get('id'),\n        nickname: params.get('nickname')\n      };\n      document.title = 'Private with ' + this.partner.nickname; // this.connectToPrivate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      console.log('PRIV', this.state.messages);\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          path: _this3.props.pathToPrivateChat,\n          conversationId: _this3.conversationId,\n          connectToPrivate: _this3.connectToPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"ALLLLLLLLLLLLOOOOOOOOOOO\", React.createElement(\"div\", {\n        className: \"usersOnlineStyle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Private;\n}(React.Component);\n\nexport default Private;\nexport { pathToPrivateChat, connectToPrivate };","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Private.js"],"names":["React","openSocket","updateNav","Messages","ChatInput","UserOnline","sendToServer","connectToWS","pathToPrivateChat","connectToPrivate","partner","fetch","then","res","json","data","console","log","conversationId","user","id","socket","on","message","navName","nickname","route","updateMessages","Private","props","state","usersOnline","messages","bind","params","URLSearchParams","location","search","get","document","title","map","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport openSocket from 'socket.io-client';\nimport {updateNav} from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport '../css/styles.css';\nimport UserOnline from \"./UserOnline\";\nimport {sendToServer, connectToWS} from \"../index\";\nconst pathToPrivateChat = '/private/';\n\nfunction connectToPrivate(partner) {\n    fetch('/session/user').then(res => res.json()).then(data => {\n        console.log(data);\n        let conversationId = (data.user.id + '-' + partner.id);\n        this.socket = openSocket(`http://localhost:5000/private?conversationId=${conversationId}`);\n        this.socket.on('established', (message) => {\n            console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message);\n            // this.updateUsersOnline(message.data.usersOnline);\n            updateNav({\n                navName: partner.nickname,\n                route: pathToPrivateChat+partner.nickname\n            });\n            this.updateMessages(message);\n        });\n        this.socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n            this.updateMessages(message);\n        });\n        // this.socket.on('demolished', (message) => {\n        //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n        //     this.updateUsersOnline(message.data.usersOnline);\n        //     this.updateMessages(message);\n        // });\n    });\n}\n\nclass Private extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.socket = null;\n        this.state = {\n            usersOnline: [],\n            messages: [],\n        };\n        connectToPrivate = connectToPrivate.bind(this);\n        this.sendToServer = sendToServer.bind(this);\n    }\n\n\n    componentDidMount() {\n        const params = new URLSearchParams(this.props.location.search);\n        this.partner = {\n            id: params.get('id'),\n            nickname: params.get('nickname')\n        };\n        document.title = 'Private with ' + this.partner.nickname;\n        // this.connectToPrivate();\n    }\n    \n    render() {\n        console.log('PRIV', this.state.messages);\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            return <UserOnline key={i} user={user} path={this.props.pathToPrivateChat}\n                               conversationId={this.conversationId}\n                               connectToPrivate={this.connectToPrivate} />\n        });\n        return (\n            <div>\n                ALLLLLLLLLLLLOOOOOOOOOOO\n                <div className='usersOnlineStyle'>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        )\n    }\n}\n\nexport default Private;\nexport {pathToPrivateChat, connectToPrivate};"]},"metadata":{},"sourceType":"module"}