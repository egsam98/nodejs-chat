{"ast":null,"code":"import _regeneratorRuntime from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UsersOnline from './UsersOnline';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n    _this.connection = null;\n\n    _this.createWS = function (connectionID) {\n      _this.connection = new WebSocket('ws://127.0.0.1:5000/?connectionID=' + connectionID);\n\n      _this.connection.onopen = function () {\n        console.log('WEBSOCKET RUN'); // this.apiUsersOnline()\n        //     .then(data => {\n        //         let dataJSON = JSON.parse(data);\n        //         // this.updateUsersOnline(dataJSON);\n        //         this.updateMessages({\n        //             text: dataJSON.message,\n        //             type: 'info'\n        //         });\n        //     });\n      };\n\n      _this.connection.onmessage = function (message) {\n        var messageJSON = JSON.parse(message.data);\n\n        switch (messageJSON.channel) {\n          case 'usersOnline':\n            _this.updateUsersOnline(messageJSON.data);\n\n            break;\n\n          case 'messages':\n            _this.updateMessages({\n              text: messageJSON.data,\n              type: ''\n            });\n\n            break;\n        }\n      };\n    };\n\n    _this.sendToServer = function (message) {\n      _this.connection.send(message);\n    };\n\n    _this.updateMessages = function (message) {\n      _this.setState({\n        messages: _this.state.messages.concat(message)\n      });\n    };\n\n    _this.apiUsersOnline =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/users-online');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              body = _context.sent;\n\n              if (!(response.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 8:\n              return _context.abrupt(\"return\", body);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.updateUsersOnline = function (users) {\n      _this.setState({\n        usersOnline: users\n      });\n    };\n\n    _this.state = {\n      usersOnline: [],\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Login, {\n        createWS: this.createWS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(UsersOnline, {\n        usersOnline: this.state.usersOnline,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat; // export {updateMessages};","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UsersOnline","Chat","props","connection","createWS","connectionID","WebSocket","onopen","console","log","onmessage","message","messageJSON","JSON","parse","data","channel","updateUsersOnline","updateMessages","text","type","sendToServer","send","setState","messages","state","concat","apiUsersOnline","fetch","response","json","body","status","Error","users","usersOnline","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;IAEMC,I;;;;;AAEF,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8EAAMA,KAAN;AADe,UAQnBC,UARmB,GAQN,IARM;;AAAA,UAUnBC,QAVmB,GAUR,UAACC,YAAD,EAAkB;AACzB,YAAKF,UAAL,GAAkB,IAAIG,SAAJ,CAAc,uCAAuCD,YAArD,CAAlB;;AACA,YAAKF,UAAL,CAAgBI,MAAhB,GAAyB,YAAM;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAD2B,CAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,OAXD;;AAYA,YAAKN,UAAL,CAAgBO,SAAhB,GAA4B,UAACC,OAAD,EAAa;AACrC,YAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACI,IAAnB,CAAlB;;AACA,gBAAQH,WAAW,CAACI,OAApB;AACI,eAAK,aAAL;AACI,kBAAKC,iBAAL,CAAuBL,WAAW,CAACG,IAAnC;;AACA;;AACJ,eAAK,UAAL;AACI,kBAAKG,cAAL,CAAoB;AAChBC,cAAAA,IAAI,EAAEP,WAAW,CAACG,IADF;AAEhBK,cAAAA,IAAI,EAAE;AAFU,aAApB;;AAIA;AATR;AAWH,OAbD;AAcH,KAtCkB;;AAAA,UAwCnBC,YAxCmB,GAwCJ,UAACV,OAAD,EAAa;AACxB,YAAKR,UAAL,CAAgBmB,IAAhB,CAAqBX,OAArB;AACH,KA1CkB;;AAAA,UA4CnBO,cA5CmB,GA4CF,UAACP,OAAD,EAAa;AAC1B,YAAKY,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAE,MAAKC,KAAL,CAAWD,QAAX,CAAoBE,MAApB,CAA2Bf,OAA3B;AAAX,OAAd;AACH,KA9CkB;;AAAA,UAgDnBgB,cAhDmB;AAAA;AAAA;AAAA;AAAA,6BAgDF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACUC,KAAK,CAAC,eAAD,CADf;;AAAA;AACPC,cAAAA,QADO;AAAA;AAAA,qBAEMA,QAAQ,CAACC,IAAT,EAFN;;AAAA;AAEPC,cAAAA,IAFO;;AAAA,oBAGTF,QAAQ,CAACG,MAAT,KAAoB,GAHX;AAAA;AAAA;AAAA;;AAAA,oBAIHC,KAAK,CAACF,IAAI,CAACpB,OAAN,CAJF;;AAAA;AAAA,+CAMNoB,IANM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhDE;;AAAA,UAyDnBd,iBAzDmB,GAyDC,UAACiB,KAAD,EAAW;AAC3B,YAAKX,QAAL,CAAc;AAACY,QAAAA,WAAW,EAAED;AAAd,OAAd;AACH,KA3DkB;;AAEf,UAAKT,KAAL,GAAa;AACTU,MAAAA,WAAW,EAAE,EADJ;AAETX,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAFe;AAMlB;;;;6BAuDQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,QAAQ,EAAE,KAAKpB,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,WAAD;AAAa,QAAA,WAAW,EAAE,KAAKqB,KAAL,CAAWU,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWD,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CAFJ,EAMI,oBAAC,SAAD;AAAW,QAAA,YAAY,EAAE,KAAKH,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CADJ;AAUH;;;;EA1EczB,KAAK,CAACwC,S;;AA6EzB,eAAenC,IAAf,C,CACA","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UsersOnline from './UsersOnline';\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            usersOnline: [],\n            messages: []\n        };\n    }\n\n    connection = null;\n\n    createWS = (connectionID) => {\n        this.connection = new WebSocket('ws://127.0.0.1:5000/?connectionID=' + connectionID);\n        this.connection.onopen = () => {\n            console.log('WEBSOCKET RUN');\n            // this.apiUsersOnline()\n            //     .then(data => {\n            //         let dataJSON = JSON.parse(data);\n            //         // this.updateUsersOnline(dataJSON);\n            //         this.updateMessages({\n            //             text: dataJSON.message,\n            //             type: 'info'\n            //         });\n            //     });\n        };\n        this.connection.onmessage = (message) => {\n            let messageJSON = JSON.parse(message.data);\n            switch (messageJSON.channel) {\n                case 'usersOnline':\n                    this.updateUsersOnline(messageJSON.data);\n                    break;\n                case 'messages':\n                    this.updateMessages({\n                        text: messageJSON.data,\n                        type: ''\n                    });\n                    break;\n            }\n        };\n    };\n\n    sendToServer = (message) => {\n        this.connection.send(message);\n    };\n\n    updateMessages = (message) => {\n        this.setState({messages: this.state.messages.concat(message)});\n    };\n\n    apiUsersOnline = async () => {\n        const response = await fetch('/users-online');\n        const body = await response.json();\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n        return body;\n    };\n\n    updateUsersOnline = (users) => {\n        this.setState({usersOnline: users});\n    };\n\n    render() {\n        return (\n            <div>\n                <Login createWS={this.createWS} />\n                <div>\n                    <UsersOnline usersOnline={this.state.usersOnline}/>\n                    <Messages messages={this.state.messages} />\n                </div>\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;\n// export {updateMessages};"]},"metadata":{},"sourceType":"module"}