{"ast":null,"code":"import _regeneratorRuntime from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UsersOnline from './UsersOnline';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n    _this.connection = null;\n\n    _this.createWS = function (connectionID) {\n      _this.connection = new WebSocket('ws://127.0.0.1:5000/?connectionID=' + connectionID);\n\n      _this.connection.onopen = function () {\n        _this.updateMessages({\n          text: 'Пользователь ' + connectionID + ' присоединился к чату',\n          type: 'info'\n        });\n      };\n\n      _this.connection.onerror = function (error) {\n        console.log(error);\n      };\n\n      _this.connection.onmessage = function (message) {\n        _this.updateMessages({\n          text: message.data,\n          type: 'default'\n        });\n      };\n    };\n\n    _this.sendToServer = function (message) {\n      _this.connection.send(message);\n    };\n\n    _this.updateMessages = function (message) {\n      _this.setState({\n        messages: _this.state.messages.concat(message)\n      });\n    };\n\n    _this.callBackendAPI =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/index');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              body = _context.sent;\n\n              if (!(response.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 8:\n              return _context.abrupt(\"return\", body);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.state = {\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      // const divsInRow = {\n      //     display: 'inline'\n      // };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Login, {\n        createWS: this.createWS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(UsersOnline, {\n        style: {\n          float: 'right',\n          width: '100px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat; // export {updateMessages};","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UsersOnline","Chat","props","connection","createWS","connectionID","WebSocket","onopen","updateMessages","text","type","onerror","error","console","log","onmessage","message","data","sendToServer","send","setState","messages","state","concat","callBackendAPI","fetch","response","json","body","status","Error","float","width","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UsersOnline from './UsersOnline';\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {messages: [] };\n    }\n\n    connection = null;\n\n    createWS = (connectionID) => {\n        this.connection = new WebSocket('ws://127.0.0.1:5000/?connectionID=' + connectionID);\n        this.connection.onopen = () => {\n            this.updateMessages({\n                text: 'Пользователь ' + connectionID + ' присоединился к чату',\n                type: 'info'\n            });\n        };\n        this.connection.onerror = function (error) {\n            console.log(error);\n        };\n        this.connection.onmessage = (message) => {\n            this.updateMessages({\n                text: message.data,\n                type: 'default'\n            });\n        };\n    };\n\n    sendToServer = (message) => {\n        this.connection.send(message);\n    };\n\n    updateMessages = (message) => {\n        this.setState({messages: this.state.messages.concat(message)});\n    };\n\n    callBackendAPI = async () => {\n        const response = await fetch('/index');\n        const body = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n        return body;\n    };\n\n    render() {\n        // const divsInRow = {\n        //     display: 'inline'\n        // };\n        return (\n            <div>\n                <Login createWS={this.createWS} />\n                <div>\n                    <Messages messages={this.state.messages} />\n                    <UsersOnline style={{float: 'right', width: '100px'}} />\n                </div>\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;\n// export {updateMessages};"]},"metadata":{},"sourceType":"module"}