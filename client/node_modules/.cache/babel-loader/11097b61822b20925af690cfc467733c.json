{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport { Link } from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\nimport Cookies from 'universal-cookie';\n\nfunction reverseString(s) {\n  return s.split(\"\").reverse().join(\"\");\n}\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _this.connectToRoom = function (nickname) {\n      var socket = openSocket(\"http://127.0.0.1:5000?nickname=\".concat(nickname));\n      socket.on('cookiesReceived', function (message) {\n        _this.cookies.set('id', message.data.id);\n\n        _this.cookies.set('nickname', message.data.nickname);\n\n        _this.cookies.set('avatar', message.data.avatar);\n      });\n      socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'connected\\' channel:', message);\n        if (!_this.state.sessionId) _this.setState({\n          sessionId: _this.cookies.get('id')\n        });\n\n        _this.setState({\n          usersOnline: message.data.usersOnline\n        });\n\n        _this.roomMessages.push(message);\n\n        if (window.location.pathname === '/') _this.setState({\n          messages: _this.roomMessages,\n          sockets: _this.state.sockets.concat(socket),\n          currentSocket: socket\n        });\n\n        _this.updateNav({\n          navName: _this._ROOM_NAV_NAME,\n          messagesStore: _this._ROOM_MESSAGE_STORE,\n          socket: socket\n        });\n      });\n      socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n        _this.roomMessages.push(message);\n\n        if (window.location.pathname === '/') _this.setState({\n          messages: _this.roomMessages\n        });\n      });\n      socket.on('join', function (message) {\n        console.log('Websocket: broadcast from \\'join\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n        var partner = {\n          id: message.data.id,\n          nickname: message.data.navName\n        };\n\n        _this.connectToPrivate(partner, true);\n      });\n      socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'userDisconnected\\' channel:', message);\n\n        _this.setState({\n          usersOnline: message.data.usersOnline\n        });\n\n        _this.roomMessages.push(message);\n\n        if (window.location.pathname === '/') _this.setState({\n          messages: _this.roomMessages\n        });\n      });\n    };\n\n    _this.connectToPrivate = function (partner) {\n      var isReverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var conversationId = _this.cookies.get('id') + '-' + partner.id;\n      if (isReverse) conversationId = reverseString(conversationId); // const cookies = new Cookies();\n\n      var socket = openSocket(\"http://127.0.0.1:5000?conversationId=\".concat(conversationId, \"&id=\").concat(_this.cookies.get('id'), \"\\n        &nickname=\").concat(_this.cookies.get('nickname'), \"&avatar=\").concat(_this.cookies.get('avatar')));\n      socket.on('established', function (message) {\n        console.log('Websocket: broadcast \\'established\\' channel:', message);\n\n        _this.updateNav({\n          navName: partner.nickname,\n          messagesStore: conversationId,\n          socket: socket\n        });\n\n        if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = [];\n\n        _this.privateMessages[conversationId].push(message);\n\n        if (window.location.pathname === \"/\".concat(conversationId)) _this.setState({\n          messages: _this.privateMessages[conversationId],\n          currentSocket: socket\n        });\n      });\n      socket.on('privateMessage', function (message) {\n        console.log('Websocket: broadcast from \\'privateMessage\\' channel:', message);\n        if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = [];\n\n        _this.privateMessages[conversationId].push(message);\n\n        if (window.location.pathname === \"/\".concat(conversationId)) _this.setState({\n          messages: _this.privateMessages[conversationId]\n        });\n      });\n      socket.on('demolished', function (message) {\n        console.log('Websocket: broadcast from \\'demolished\\' channel:', message);\n\n        _this.privateMessages[conversationId].push(message);\n\n        if (window.location.pathname === \"/\".concat(conversationId)) _this.setState({\n          messages: _this.privateMessages[conversationId]\n        });\n      });\n    };\n\n    _this.sendToServer = function (text) {\n      // const cookies = new Cookies();\n      var message = {\n        data: {\n          nickname: _this.cookies.get('nickname'),\n          avatar: _this.cookies.get('avatar')\n        },\n        text: text\n      };\n      console.log('BEFORE SEND', message);\n\n      _this.state.currentSocket.emit('message', message);\n    };\n\n    _this.updateNav = function (nav) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.state.nav[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var navSaved = _step.value;\n          if (navSaved.messagesStore === nav.messagesStore) return;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.setState({\n        nav: _this.state.nav.concat(nav)\n      });\n    };\n\n    _this.handleClickNav = function (itemId, item) {\n      if (item.messagesStore === _this._ROOM_MESSAGE_STORE) _this.setState({\n        messages: _this.roomMessages\n      });else _this.setState({\n        messages: _this.privateMessages[item.messagesStore]\n      });\n\n      _this.setState({\n        currentSocket: item.socket\n      });\n\n      document.getElementsByClassName('nav-div').forEach(function (elem) {\n        return elem.style.border = '';\n      });\n      document.getElementById(itemId).style.border = 'black 1px solid';\n    };\n\n    _this.cookies = new Cookies();\n    _this._ROOM_NAV_NAME = 'ROOM';\n    _this._ROOM_MESSAGE_STORE = 'ROOM';\n    _this.roomMessages = [];\n    _this.privateMessages = {};\n    _this.state = {\n      sessionId: null,\n      sockets: [],\n      currentSocket: null,\n      nav: [],\n      usersOnline: [],\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var navStyle = {\n        display: 'flex',\n        justifyContent: 'center',\n        marginLeft: '5px',\n        marginRight: '5px',\n        paddingLeft: '5px',\n        paddingRight: '5px'\n      };\n      var nav = this.state.nav.map(function (item, i) {\n        var itemId = item.messagesStore;\n\n        if (itemId.indexOf('-') !== -1) {\n          itemId = itemId.split('-').join('_');\n        }\n\n        return React.createElement(\"div\", {\n          id: itemId,\n          className: 'nav-div',\n          style: navStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: item.navName === _this2._ROOM_NAV_NAME ? '/' : \"/\".concat(item.messagesStore),\n          className: \"nav-item nav-link\",\n          key: i,\n          onClick: function onClick() {\n            return _this2.handleClickNav(itemId, item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, item.navName), React.createElement(\"a\", {\n          href: '#',\n          style: {\n            textDecoration: 'none',\n            color: 'black'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, \"\\xD7\"));\n      });\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        user.nickname += user.id === parseInt(_this2.cookies.get('id')) && user.nickname.indexOf('(Вы)') === -1 ? ' (Вы)' : '';\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          sessionId: _this2.state.sessionId,\n          roomName: _this2._ROOM_NAV_NAME,\n          connectToPrivate: _this2.connectToPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-expand-lg navbar-light bg-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Chat\")), React.createElement(\"button\", {\n        className: \"navbar-toggler\",\n        type: \"button\",\n        \"data-toggle\": \"collapse\",\n        \"data-target\": \"#navbarNavAltMarkup\",\n        \"aria-controls\": \"navbarNavAltMarkup\",\n        \"aria-expanded\": \"false\",\n        \"aria-label\": \"Toggle navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"navbar-toggler-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"collapse navbar-collapse\",\n        id: \"navbarNavAltMarkup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, nav))), React.createElement(Login, {\n        connectToRoom: this.connectToRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"usersOnlineStyle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0438 \\u0432 \\u043A\\u043E\\u043C\\u043D\\u0430\\u0442\\u0435 \\\"\", this._ROOM_NAV_NAME, \"\\\": \"), usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UserOnline","Link","openSocket","Cookies","reverseString","s","split","reverse","join","Chat","props","connectToRoom","nickname","socket","on","message","cookies","set","data","id","avatar","console","log","state","sessionId","setState","get","usersOnline","roomMessages","push","window","location","pathname","messages","sockets","concat","currentSocket","updateNav","navName","_ROOM_NAV_NAME","messagesStore","_ROOM_MESSAGE_STORE","partner","connectToPrivate","isReverse","conversationId","privateMessages","sendToServer","text","emit","nav","navSaved","handleClickNav","itemId","item","document","getElementsByClassName","forEach","elem","style","border","getElementById","navStyle","display","justifyContent","marginLeft","marginRight","paddingLeft","paddingRight","map","i","indexOf","textDecoration","color","user","parseInt","fontWeight","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport {Link} from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\nimport Cookies from 'universal-cookie';\n\nfunction reverseString(s){\n    return s.split(\"\").reverse().join(\"\");\n}\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.cookies = new Cookies();\n        this._ROOM_NAV_NAME = 'ROOM';\n        this._ROOM_MESSAGE_STORE = 'ROOM';\n        this.roomMessages = [];\n        this.privateMessages = {};\n        this.state = {\n            sessionId: null,\n            sockets: [],\n            currentSocket: null,\n            nav: [],\n            usersOnline: [],\n            messages: [],\n        };\n    }\n\n    connectToRoom = (nickname) => {\n        const socket = openSocket(`http://127.0.0.1:5000?nickname=${nickname}`);\n        socket.on('cookiesReceived', message => {\n            this.cookies.set('id', message.data.id);\n            this.cookies.set('nickname', message.data.nickname);\n            this.cookies.set('avatar', message.data.avatar);\n        });\n        socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'connected\\' channel:', message);\n            if (!this.state.sessionId)\n                this.setState({sessionId: this.cookies.get('id')});\n            this.setState({usersOnline: message.data.usersOnline});\n            this.roomMessages.push(message);\n            if (window.location.pathname === '/')\n                this.setState({\n                    messages: this.roomMessages,\n                    sockets: this.state.sockets.concat(socket),\n                    currentSocket: socket,\n                });\n            this.updateNav({\n                navName: this._ROOM_NAV_NAME,\n                messagesStore: this._ROOM_MESSAGE_STORE,\n                socket,\n            });\n        });\n        socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n            this.roomMessages.push(message);\n            if (window.location.pathname === '/')\n                this.setState({\n                    messages: this.roomMessages,\n                });\n        });\n        socket.on('join', (message) => {\n            console.log('Websocket: broadcast from \\'join\\' channel:', message);\n            // this.updateUsersOnline(message.data.usersOnline);\n            let partner = {\n                id: message.data.id,\n                nickname: message.data.navName\n            };\n            this.connectToPrivate(partner, true)\n        });\n        socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'userDisconnected\\' channel:', message);\n            this.setState({usersOnline: message.data.usersOnline});\n            this.roomMessages.push(message);\n            if (window.location.pathname === '/')\n                this.setState({\n                    messages: this.roomMessages,\n                });\n        });\n    };\n    connectToPrivate = (partner, isReverse=false) => {\n        let conversationId = (this.cookies.get('id') + '-' + partner.id);\n        if (isReverse)\n            conversationId = reverseString(conversationId);\n        // const cookies = new Cookies();\n        const socket = openSocket(`http://127.0.0.1:5000?conversationId=${conversationId}&id=${this.cookies.get('id')}\n        &nickname=${this.cookies.get('nickname')}&avatar=${this.cookies.get('avatar')}`);\n        socket.on('established', (message) => {\n            console.log('Websocket: broadcast \\'established\\' channel:', message);\n            this.updateNav({\n                navName: partner.nickname,\n                messagesStore: conversationId,\n                socket,\n            });\n            if (!this.privateMessages[conversationId])\n                this.privateMessages[conversationId] = [];\n            this.privateMessages[conversationId].push(message);\n            if (window.location.pathname === `/${conversationId}`)\n                this.setState({\n                    messages: this.privateMessages[conversationId],\n                    currentSocket: socket\n                });\n        });\n        socket.on('privateMessage', (message) => {\n            console.log('Websocket: broadcast from \\'privateMessage\\' channel:', message);\n            if (!this.privateMessages[conversationId])\n                this.privateMessages[conversationId] = [];\n            this.privateMessages[conversationId].push(message);\n            if (window.location.pathname === `/${conversationId}`)\n                this.setState({\n                    messages: this.privateMessages[conversationId],\n                });\n        });\n        socket.on('demolished', (message) => {\n            console.log('Websocket: broadcast from \\'demolished\\' channel:', message);\n            this.privateMessages[conversationId].push(message);\n            if (window.location.pathname === `/${conversationId}`)\n                this.setState({\n                    messages: this.privateMessages[conversationId],\n                });\n        });\n    };\n    sendToServer = (text) => {\n        // const cookies = new Cookies();\n        let message = {\n            data: {\n                nickname: this.cookies.get('nickname'),\n                avatar: this.cookies.get('avatar')\n            },\n            text\n        };\n        console.log('BEFORE SEND', message);\n        this.state.currentSocket.emit('message', message);\n    };\n    updateNav = (nav) => {\n        for (let navSaved of this.state.nav) {\n            if (navSaved.messagesStore === nav.messagesStore)\n                return;\n        }\n        this.setState({nav: this.state.nav.concat(nav)})\n    };\n\n    handleClickNav = (itemId, item) => {\n        if (item.messagesStore === this._ROOM_MESSAGE_STORE)\n            this.setState({\n                messages: this.roomMessages\n            });\n        else this.setState({\n            messages: this.privateMessages[item.messagesStore]\n        });\n        this.setState({currentSocket: item.socket});\n        document.getElementsByClassName('nav-div').forEach(elem => elem.style.border = '');\n        document.getElementById(itemId).style.border = 'black 1px solid';\n    };\n\n    render() {\n        const navStyle = {\n            display: 'flex',\n            justifyContent: 'center',\n            marginLeft: '5px',\n            marginRight: '5px',\n            paddingLeft: '5px',\n            paddingRight: '5px',\n        };\n        const nav = this.state.nav.map((item, i) => {\n            let itemId = item.messagesStore;\n            if (itemId.indexOf('-') !== -1) {\n                itemId = itemId.split('-').join('_');\n            }\n            return (\n                <div id={itemId} className={'nav-div'} style={navStyle}>\n                    <Link to={item.navName === this._ROOM_NAV_NAME? '/': `/${item.messagesStore}`}\n                          className=\"nav-item nav-link\" key={i}\n                          onClick={() => this.handleClickNav(itemId, item)}>{item.navName}</Link>\n                    <a href={'#'} style={{textDecoration: 'none', color:'black'}}>&times;</a>\n                </div>\n            )\n        });\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            user.nickname += user.id === parseInt(this.cookies.get('id')) && user.nickname.indexOf('(Вы)') === -1? ' (Вы)': '';\n\n            return <UserOnline key={i} user={user} sessionId={this.state.sessionId} roomName={this._ROOM_NAV_NAME}\n                               connectToPrivate={this.connectToPrivate} />\n        });\n        return(\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <a className=\"navbar-brand\" href=\"#\">\n                        <h3>Chat</h3>\n                    </a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\"\n                            aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                        <div className=\"navbar-nav\">\n                            {nav}\n                        </div>\n                    </div>\n                </nav>\n                <Login connectToRoom={this.connectToRoom}/>\n                <div className='usersOnlineStyle'>\n                    <p style={{fontWeight: 'bold'}}>Пользователи в комнате \"{this._ROOM_NAV_NAME}\": </p>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages}/>\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}