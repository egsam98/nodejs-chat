{"ast":null,"code":"import _regeneratorRuntime from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UsersOnline from './UsersOnline';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n    _this.connection = null;\n\n    _this.createWS = function (connectionID) {\n      _this.connection = new WebSocket('ws://127.0.0.1:5000/?connectionID=' + connectionID);\n\n      _this.connection.onopen = function () {\n        _this.updateUsersOnline().then(function (data) {\n          return _this.setState({\n            usersOnline: data\n          });\n        });\n\n        _this.updateMessages({\n          text: 'Пользователь ' + connectionID + ' присоединился к чату',\n          type: 'info'\n        });\n      };\n\n      _this.connection.onmessage = function (message) {\n        _this.updateMessages({\n          text: message.data,\n          type: ''\n        });\n      };\n    };\n\n    _this.sendToServer = function (message) {\n      _this.connection.send(message);\n    };\n\n    _this.updateMessages = function (message) {\n      _this.setState({\n        messages: _this.state.messages.concat(message)\n      });\n    };\n\n    _this.updateUsersOnline =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/users-online');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              body = _context.sent;\n              console.log(body);\n\n              if (!(response.status !== 200)) {\n                _context.next = 9;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 9:\n              return _context.abrupt(\"return\", body);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.state = {\n      usersOnline: [],\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(Login, {\n        createWS: this.createWS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(UsersOnline, {\n        usersOnline: this.state.usersOnline,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat; // export {updateMessages};","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UsersOnline","Chat","props","connection","createWS","connectionID","WebSocket","onopen","updateUsersOnline","then","data","setState","usersOnline","updateMessages","text","type","onmessage","message","sendToServer","send","messages","state","concat","fetch","response","json","body","console","log","status","Error","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UsersOnline from './UsersOnline';\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            usersOnline: [],\n            messages: []\n        };\n    }\n\n    connection = null;\n\n    createWS = (connectionID) => {\n        this.connection = new WebSocket('ws://127.0.0.1:5000/?connectionID=' + connectionID);\n        this.connection.onopen = () => {\n            this.updateUsersOnline()\n                .then(data => this.setState( {usersOnline: data}));\n            this.updateMessages({\n                text: 'Пользователь ' + connectionID + ' присоединился к чату',\n                type: 'info'\n            });\n        };\n        this.connection.onmessage = (message) => {\n            this.updateMessages({\n                text: message.data,\n                type: ''\n            });\n        };\n    };\n\n    sendToServer = (message) => {\n        this.connection.send(message);\n    };\n\n    updateMessages = (message) => {\n        this.setState({messages: this.state.messages.concat(message)});\n    };\n\n    updateUsersOnline = async () => {\n        const response = await fetch('/users-online');\n        const body = await response.json();\n        console.log(body);\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n        return body;\n    };\n\n    render() {\n        return (\n            <div>\n                <Login createWS={this.createWS} />\n                <div>\n                    <UsersOnline usersOnline={this.state.usersOnline}/>\n                    <Messages messages={this.state.messages} />\n                </div>\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;\n// export {updateMessages};"]},"metadata":{},"sourceType":"module"}