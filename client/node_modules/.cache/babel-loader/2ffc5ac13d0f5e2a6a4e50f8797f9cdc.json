{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Room.js\";\nimport React from 'react';\nimport Chat from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from \"./Login\";\nimport { Link } from \"react-router-dom\";\nimport UserOnline from \"./UserOnline\";\nimport openSocket from 'socket.io-client';\nimport { updateNav } from \"./Chat\";\n\nvar Room =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Room, _React$Component);\n\n  function Room(props) {\n    var _this;\n\n    _classCallCheck(this, Room);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Room).call(this, props));\n\n    _this.connectToRoom = function (nickname) {\n      _this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n\n      _this.socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n\n        _this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateMessages(message);\n      });\n\n      _this.socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n        _this.updateMessages(message);\n      });\n\n      _this.socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n\n        _this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateMessages(message);\n      });\n\n      updateNav({\n        navName: 'ROOM',\n        route: '/'\n      });\n    };\n\n    _this.connectToPrivate = function (partner) {\n      fetch('/session/user').then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        var conversationId = data.user.id + '-' + partner.id;\n        console.log(_this.conversationId);\n        _this.socket = openSocket(\"http://localhost:5000/private?conversationId=\".concat(_this.conversationId));\n\n        _this.socket.on('established', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n          updateNav({\n            navName: partner.nickname,\n            route: _this.pathToPrivateChat + partner.nickname\n          });\n\n          _this.updateMessages(message);\n        });\n\n        _this.socket.on('message', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n\n          _this.updateMessages(message);\n        }); // this.socket.on('demolished', (message) => {\n        //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n        //     this.updateUsersOnline(message.data.usersOnline);\n        //     this.updateMessages(message);\n        // });\n\n      });\n    };\n\n    _this.conversationId = null;\n    _this.socket = null;\n    _this.state = {\n      usersOnline: [],\n      messages: []\n    };\n    _this.sendToServer = _this.props.sendToServer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateMessages = _this.props.updateMessages.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateUsersOnline = _this.props.updateUsersOnline.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Room, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.conversationId);\n      var usersOnlineStyle = {\n        float: 'right',\n        width: '400px',\n        height: '600px',\n        border: 'black 2px solid',\n        padding: '20px'\n      };\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          path: _this2.props.pathToPrivateChat,\n          conversationId: _this2.conversationId,\n          connectToPrivate: _this2.connectToPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Login, {\n        createRoom: this.connectToRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: usersOnlineStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Room;\n}(React.Component);\n\nexport default Room;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Room.js"],"names":["React","Chat","Messages","ChatInput","Login","Link","UserOnline","openSocket","updateNav","Room","props","connectToRoom","nickname","socket","on","message","console","log","updateUsersOnline","data","usersOnline","updateMessages","navName","route","connectToPrivate","partner","fetch","then","res","json","conversationId","user","id","pathToPrivateChat","state","messages","sendToServer","bind","usersOnlineStyle","float","width","height","border","padding","map","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Chat from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from \"./Login\";\nimport {Link} from \"react-router-dom\";\nimport UserOnline from \"./UserOnline\";\nimport openSocket from 'socket.io-client';\nimport {updateNav} from \"./Chat\";\n\nclass Room extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.conversationId = null;\n        this.socket = null;\n        this.state = {\n            usersOnline: [],\n            messages: [],\n        };\n        this.sendToServer = this.props.sendToServer.bind(this);\n        this.updateMessages = this.props.updateMessages.bind(this);\n        this.updateUsersOnline = this.props.updateUsersOnline.bind(this);\n    }\n\n    connectToRoom = (nickname) => {\n        this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n        this.socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n            this.updateUsersOnline(message.data.usersOnline);\n            this.updateMessages(message);\n        });\n        this.socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n            this.updateMessages(message);\n        });\n        this.socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n            this.updateUsersOnline(message.data.usersOnline);\n            this.updateMessages(message);\n        });\n\n        updateNav({\n            navName:'ROOM',\n            route: '/'\n        });\n    };\n\n    connectToPrivate = (partner) => {\n        fetch('/session/user').then(res => res.json()).then(data => {\n            let conversationId = (data.user.id + '-' + partner.id);\n            console.log(this.conversationId);\n            this.socket = openSocket(`http://localhost:5000/private?conversationId=${this.conversationId}`);\n            this.socket.on('established', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message);\n                // this.updateUsersOnline(message.data.usersOnline);\n                updateNav({\n                    navName: partner.nickname,\n                    route: this.pathToPrivateChat+partner.nickname\n                });\n                this.updateMessages(message);\n            });\n            this.socket.on('message', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n                this.updateMessages(message);\n            });\n            // this.socket.on('demolished', (message) => {\n            //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n            //     this.updateUsersOnline(message.data.usersOnline);\n            //     this.updateMessages(message);\n            // });\n        });\n    };\n\n    render() {\n        console.log(this.conversationId);\n        const usersOnlineStyle = {\n            float: 'right',\n            width: '400px',\n            height: '600px',\n            border: 'black 2px solid',\n            padding: '20px'\n        };\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            return <UserOnline key={i} user={user} path={this.props.pathToPrivateChat}\n                               conversationId={this.conversationId}\n                               connectToPrivate={this.connectToPrivate} />\n        });\n        return (\n            <div>\n                <Login createRoom={this.connectToRoom} />\n                <div style={usersOnlineStyle}>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        )\n    }\n}\n\nexport default Room;"]},"metadata":{},"sourceType":"module"}