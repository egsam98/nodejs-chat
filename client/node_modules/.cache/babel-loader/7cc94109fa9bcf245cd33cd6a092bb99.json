{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Room.js\";\nimport React from 'react';\nimport Chat from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from \"./Login\";\nimport { Link } from \"react-router-dom\";\nimport UserOnline from \"./UserOnline\";\nimport openSocket from 'socket.io-client';\nimport { updateNav, updateMessages, updateUsersOnline } from \"./Chat\";\n\nvar Room =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Room, _React$Component);\n\n  function Room(props) {\n    var _this;\n\n    _classCallCheck(this, Room);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Room).call(this, props));\n\n    _this.createRoom = function (nickname) {\n      _this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n\n      _this.socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n        updateUsersOnline(message.data.usersOnline);\n        updateMessages(message);\n      });\n\n      _this.socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n        updateMessages(message);\n      });\n\n      _this.socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n        updateUsersOnline(message.data.usersOnline);\n        updateMessages(message);\n      });\n\n      updateNav({\n        navName: 'ROOM',\n        route: '/'\n      });\n    };\n\n    _this.createPrivate = function (partner) {\n      fetch('/session/user').then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        var conversationId = data.user.id + '-' + partner.id;\n        console.log(conversationId);\n        _this.socket = openSocket(\"http://localhost:5000/private?conversationId=\".concat(conversationId));\n\n        _this.socket.on('established', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n          _this.setState({\n            nav: _this.state.nav.concat({\n              navName: partner.nickname,\n              route: _this.pathToPrivateChat + partner.nickname\n            })\n          });\n\n          _this.updateMessages(message);\n        });\n\n        _this.socket.on('message', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n\n          _this.updateMessages(message);\n        }); // this.socket.on('demolished', (message) => {\n        //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n        //     this.updateUsersOnline(message.data.usersOnline);\n        //     this.updateMessages(message);\n        // });\n\n      });\n    };\n\n    _this.sendToServer = function (message) {\n      _this.socket.emit('message', message);\n    };\n\n    _this.socket = null;\n    _this.state = {\n      usersOnline: [],\n      messages: []\n    };\n    updateUsersOnline = updateUsersOnline.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    updateMessages = updateMessages.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Room, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var usersOnlineStyle = {\n        float: 'right',\n        width: '400px',\n        height: '600px',\n        border: 'black 2px solid',\n        padding: '20px'\n      };\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          path: _this2.pathToPrivateChat,\n          createPrivate: _this2.createPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Login, {\n        createRoom: this.createRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: usersOnlineStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Room;\n}(React.Component);\n\nexport default Room;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Room.js"],"names":["React","Chat","Messages","ChatInput","Login","Link","UserOnline","openSocket","updateNav","updateMessages","updateUsersOnline","Room","props","createRoom","nickname","socket","on","message","console","log","data","usersOnline","navName","route","createPrivate","partner","fetch","then","res","json","conversationId","user","id","setState","nav","state","concat","pathToPrivateChat","sendToServer","emit","messages","bind","usersOnlineStyle","float","width","height","border","padding","map","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Chat from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from \"./Login\";\nimport {Link} from \"react-router-dom\";\nimport UserOnline from \"./UserOnline\";\nimport openSocket from 'socket.io-client';\nimport {updateNav, updateMessages, updateUsersOnline} from \"./Chat\";\n\nclass Room extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.socket = null;\n        this.state = {\n            usersOnline: [],\n            messages: [],\n        };\n        updateUsersOnline = updateUsersOnline.bind(this);\n        updateMessages = updateMessages.bind(this);\n    }\n\n    createRoom = (nickname) => {\n        this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n        this.socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n            updateUsersOnline(message.data.usersOnline);\n            updateMessages(message);\n        });\n        this.socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n            updateMessages(message);\n        });\n        this.socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n            updateUsersOnline(message.data.usersOnline);\n            updateMessages(message);\n        });\n\n        updateNav({\n            navName:'ROOM',\n            route: '/'\n        });\n    };\n\n    createPrivate = (partner) => {\n        fetch('/session/user').then(res => res.json()).then(data => {\n            let conversationId = (data.user.id + '-' + partner.id);\n            console.log(conversationId);\n            this.socket = openSocket(`http://localhost:5000/private?conversationId=${conversationId}`);\n            this.socket.on('established', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message);\n                // this.updateUsersOnline(message.data.usersOnline);\n                this.setState({nav: this.state.nav.concat({\n                        navName: partner.nickname,\n                        route: this.pathToPrivateChat+partner.nickname\n                    })});\n                this.updateMessages(message);\n            });\n            this.socket.on('message', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n                this.updateMessages(message);\n            });\n            // this.socket.on('demolished', (message) => {\n            //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n            //     this.updateUsersOnline(message.data.usersOnline);\n            //     this.updateMessages(message);\n            // });\n        });\n    };\n\n    sendToServer = (message) => {\n        this.socket.emit('message', message);\n    };\n\n    render() {\n        const usersOnlineStyle = {\n            float: 'right',\n            width: '400px',\n            height: '600px',\n            border: 'black 2px solid',\n            padding: '20px'\n        };\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            return <UserOnline key={i} user={user} path={this.pathToPrivateChat} createPrivate={this.createPrivate} />\n        });\n        return (\n            <div>\n                <Login createRoom={this.createRoom} />\n                <div style={usersOnlineStyle}>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        )\n    }\n}\n\nexport default Room;"]},"metadata":{},"sourceType":"module"}