{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\nvar ROOM_NAV_NAME = 'ROOM';\nvar ROOM_MESSAGE_STORE = 'ROOM';\n\nfunction reverseString(s) {\n  return s.split(\"\").reverse().join(\"\");\n}\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _this.connectToRoom = function (nickname) {\n      var socket = openSocket('http://localhost:5000?nickname=' + nickname);\n      socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message); // message.sessionId = this.sessionId;\n\n        _this.setState({\n          usersOnline: message.data.usersOnline\n        });\n\n        _this.roomMessages.push(message);\n\n        _this.setState({\n          messages: _this.roomMessages,\n          sockets: _this.state.sockets.concat(socket),\n          currentSocket: socket\n        });\n\n        _this.updateNav({\n          navName: ROOM_NAV_NAME,\n          messagesStore: ROOM_MESSAGE_STORE,\n          socket: socket\n        });\n      });\n      socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n        _this.roomMessages.push(message);\n\n        _this.setState({\n          messages: _this.roomMessages\n        });\n      });\n      socket.on('join', function (message) {\n        console.log('Websocket: broadcast from \\'join\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n        var partner = {\n          id: message.data.conversationId.split('-')[0],\n          nickname: message.data.navName\n        }; // this.updateNav({\n        //     navName: partner.navName,\n        //     messagesStore: message.data.conversationId,\n        //     socket,\n        // });\n\n        _this.connectToPrivate(partner, true);\n      });\n      socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'userDisconnected\\' channel:', message);\n\n        _this.setState({\n          usersOnline: message.data.usersOnline\n        });\n\n        _this.roomMessages.push(message);\n\n        _this.setState({\n          messages: _this.roomMessages\n        });\n      });\n      fetch('/session/user').then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        _this.session.id = data.user.id;\n        _this.session.nickname = data.user.nickname;\n      });\n    };\n\n    _this.connectToPrivate = function (partner) {\n      var isReverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      _this.session.id = data.user.id;\n      console.log('PRIVATE');\n      var conversationId = _this.sessionId + '-' + partner.id;\n      if (isReverse) conversationId = reverseString(conversationId);\n      console.log('CONV_ID', conversationId);\n      var socket = openSocket(\"http://localhost:5000/?conversationId=\".concat(conversationId));\n      socket.on('established', function (message) {\n        console.log('Websocket: broadcast \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateNav({\n          navName: partner.nickname,\n          messagesStore: conversationId,\n          socket: socket\n        });\n\n        console.log('navName', partner.nickname); // console.log();\n\n        if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = [];\n\n        _this.privateMessages[conversationId].push(message);\n\n        _this.setState({\n          messages: _this.privateMessages[conversationId],\n          currentSocket: socket\n        });\n      });\n      socket.on('privateMessage', function (message) {\n        console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n        if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = [];\n\n        _this.privateMessages[conversationId].push(message);\n\n        _this.setState({\n          messages: _this.privateMessages[conversationId]\n        });\n      }); // this.socket.on('demolished', (message) => {\n      //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n      //     this.updateUsersOnline(message.data.usersOnline);\n      //     this.updateMessages(message);\n      // });\n    };\n\n    _this.sendToServer = function (message) {\n      _this.state.currentSocket.emit('message', message);\n    };\n\n    _this.updateNav = function (nav) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.state.nav[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var navSaved = _step.value;\n          if (navSaved.messagesStore === nav.messagesStore) return;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.setState({\n        nav: _this.state.nav.concat(nav)\n      });\n    };\n\n    _this.roomMessages = [];\n    _this.privateMessages = {};\n    _this.state = {\n      sockets: [],\n      currentSocket: null,\n      nav: [],\n      usersOnline: [],\n      messages: []\n    };\n    _this.sessionId = {\n      id: null,\n      nickname: null\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // console.log('NAV', this.state.nav);\n      // console.log('CHAT', this.state.messages);\n      var nav = this.state.nav.map(function (item, i) {\n        return React.createElement(Link, {\n          to: '#',\n          className: \"nav-item nav-link\",\n          key: i,\n          onClick: function onClick() {\n            if (item.messagesStore === ROOM_MESSAGE_STORE) _this2.setState({\n              messages: _this2.roomMessages\n            });else _this2.setState({\n              messages: _this2.privateMessages[item.messagesStore]\n            });\n\n            _this2.setState({\n              currentSocket: item.socket\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, item.navName);\n      });\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          sessionId: _this2.sessionId,\n          connectToPrivate: _this2.connectToPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-expand-lg navbar-light bg-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Chat\")), React.createElement(\"button\", {\n        className: \"navbar-toggler\",\n        type: \"button\",\n        \"data-toggle\": \"collapse\",\n        \"data-target\": \"#navbarNavAltMarkup\",\n        \"aria-controls\": \"navbarNavAltMarkup\",\n        \"aria-expanded\": \"false\",\n        \"aria-label\": \"Toggle navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"navbar-toggler-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"collapse navbar-collapse\",\n        id: \"navbarNavAltMarkup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, nav))), React.createElement(Login, {\n        connectToRoom: this.connectToRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"usersOnlineStyle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UserOnline","BrowserRouter","Router","Route","Switch","Redirect","Link","openSocket","ROOM_NAV_NAME","ROOM_MESSAGE_STORE","reverseString","s","split","reverse","join","Chat","props","connectToRoom","nickname","socket","on","message","console","log","setState","usersOnline","data","roomMessages","push","messages","sockets","state","concat","currentSocket","updateNav","navName","messagesStore","partner","id","conversationId","connectToPrivate","fetch","then","res","json","session","user","isReverse","sessionId","privateMessages","sendToServer","emit","nav","navSaved","map","item","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport {BrowserRouter as Router, Route, Switch, Redirect, Link} from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\n\nconst ROOM_NAV_NAME = 'ROOM';\nconst ROOM_MESSAGE_STORE = 'ROOM';\n\nfunction reverseString(s){\n    return s.split(\"\").reverse().join(\"\");\n}\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.roomMessages = [];\n        this.privateMessages = {};\n        this.state = {\n            sockets: [],\n            currentSocket: null,\n            nav: [],\n            usersOnline: [],\n            messages: [],\n        };\n        this.sessionId = {\n            id: null,\n            nickname: null\n        }\n    }\n\n    connectToRoom = (nickname) => {\n        const socket = openSocket('http://localhost:5000?nickname=' + nickname);\n        socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n            // message.sessionId = this.sessionId;\n            this.setState({usersOnline: message.data.usersOnline});\n            this.roomMessages.push(message);\n            this.setState({\n                messages: this.roomMessages,\n                sockets: this.state.sockets.concat(socket),\n                currentSocket: socket,\n            });\n            this.updateNav({\n                navName: ROOM_NAV_NAME,\n                messagesStore: ROOM_MESSAGE_STORE,\n                socket,\n            });\n        });\n        socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n            this.roomMessages.push(message);\n            this.setState({\n                messages: this.roomMessages,\n            });\n        });\n        socket.on('join', (message) => {\n            console.log('Websocket: broadcast from \\'join\\' channel:', message);\n            // this.updateUsersOnline(message.data.usersOnline);\n            let partner = {\n                id: message.data.conversationId.split('-')[0],\n                nickname: message.data.navName\n            };\n            // this.updateNav({\n            //     navName: partner.navName,\n            //     messagesStore: message.data.conversationId,\n            //     socket,\n            // });\n            this.connectToPrivate(partner, true)\n        });\n        socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'userDisconnected\\' channel:', message);\n            this.setState({usersOnline: message.data.usersOnline});\n            this.roomMessages.push(message);\n            this.setState({\n                messages: this.roomMessages,\n            });\n        });\n\n        fetch('/session/user').then(res => res.json()).then(data => {\n            this.session.id = data.user.id;\n            this.session.nickname = data.user.nickname;\n\n        });\n    };\n    connectToPrivate = (partner, isReverse=false) => {\n\n            this.session.id = data.user.id;\n            console.log('PRIVATE');\n            let conversationId = (this.sessionId + '-' + partner.id);\n            if (isReverse)\n                conversationId = reverseString(conversationId);\n            console.log('CONV_ID', conversationId);\n            const socket = openSocket(`http://localhost:5000/?conversationId=${conversationId}`);\n            socket.on('established', (message) => {\n                console.log('Websocket: broadcast \\'established\\' channel:', message);\n                // this.updateUsersOnline(message.data.usersOnline);\n                this.updateNav({\n                    navName: partner.nickname,\n                    messagesStore: conversationId,\n                    socket,\n                });\n                console.log('navName', partner.nickname);\n                // console.log();\n                if (!this.privateMessages[conversationId])\n                    this.privateMessages[conversationId] = [];\n                this.privateMessages[conversationId].push(message);\n                this.setState({\n                    messages: this.privateMessages[conversationId],\n                    currentSocket: socket\n                });\n            });\n            socket.on('privateMessage', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n                if (!this.privateMessages[conversationId])\n                    this.privateMessages[conversationId] = [];\n                this.privateMessages[conversationId].push(message);\n                this.setState({\n                    messages: this.privateMessages[conversationId],\n                });\n            });\n            // this.socket.on('demolished', (message) => {\n            //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n            //     this.updateUsersOnline(message.data.usersOnline);\n            //     this.updateMessages(message);\n            // });\n    };\n    sendToServer =(message) => {\n        this.state.currentSocket.emit('message', message);\n    };\n    updateNav = (nav) => {\n        for (let navSaved of this.state.nav) {\n            if (navSaved.messagesStore === nav.messagesStore)\n                return;\n        }\n        this.setState({nav: this.state.nav.concat(nav)})\n    };\n\n    render() {\n        // console.log('NAV', this.state.nav);\n        // console.log('CHAT', this.state.messages);\n        const nav = this.state.nav.map((item, i) => {\n            return <Link to={'#'} className=\"nav-item nav-link\" key={i}\n                         onClick={()=>{\n                             if (item.messagesStore === ROOM_MESSAGE_STORE)\n                                 this.setState({\n                                     messages: this.roomMessages\n                                 });\n                             else this.setState({\n                                 messages: this.privateMessages[item.messagesStore]\n                             });\n                             this.setState({currentSocket: item.socket})\n                         }}>{item.navName}</Link>\n        });\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            return <UserOnline key={i} user={user} sessionId={this.sessionId}\n                               connectToPrivate={this.connectToPrivate} />\n        });\n        return(\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <a className=\"navbar-brand\" href=\"#\">\n                        <h3>Chat</h3>\n                    </a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\"\n                            aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                        <div className=\"navbar-nav\">\n                            {nav}\n                        </div>\n                    </div>\n                </nav>\n                <Login connectToRoom={this.connectToRoom}/>\n                <div className='usersOnlineStyle'>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages}/>\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}