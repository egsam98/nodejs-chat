{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UsersOnline from './UsersOnline';\nimport openSocket from 'socket.io-client';\nimport Message from '../models/message';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _this.createWS = function (nickname) {\n      var socket = openSocket('http://localhost:5001');\n      socket.on('connect', function () {\n        socket.on('message', function (msg) {\n          console.log(msg);\n        });\n      });\n    };\n\n    _this.state = {\n      usersOnline: [],\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    // connection = null;\n    //\n    // createWS = (nickname) => {\n    //     this.connection = new WebSocket('ws://127.0.0.1:5000/?nickname=' + nickname);\n    //     this.connection.onopen = () => {\n    //         console.log('WEBSOCKET RUN');\n    //     };\n    //     this.connection.onmessage = (message) => {\n    //         let messageJSON = JSON.parse(message.data);\n    //         switch (messageJSON.channel) {\n    //             case 'usersOnline':\n    //                 this.updateUsersOnline(messageJSON.data);\n    //                 this.updateMessages(new Message(messageJSON.text,\n    //                     messageJSON.type));\n    //                 break;\n    //             case 'messages':\n    //                 this.updateMessages(new Message(messageJSON.text,\n    //                     messageJSON.type));\n    //                 break;\n    //         }\n    //     };\n    // };\n    //\n    // sendToServer = (message) => {\n    //     this.connection.send(message);\n    // };\n    //\n    // updateMessages = (message) => {\n    //     this.setState({messages: this.state.messages.concat(message)});\n    // };\n    //\n    // updateUsersOnline = (users) => {\n    //     this.setState({usersOnline: users});\n    // };\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Login, {\n        createWS: this.createWS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(UsersOnline, {\n        usersOnline: this.state.usersOnline,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UsersOnline","openSocket","Message","Chat","props","createWS","nickname","socket","on","msg","console","log","state","usersOnline","messages","sendToServer","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;;IAEMC,I;;;;;AAEF,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8EAAMA,KAAN;;AADe,UAQnBC,QARmB,GAQR,UAACC,QAAD,EAAc;AACrB,UAAMC,MAAM,GAAGN,UAAU,CAAC,uBAAD,CAAzB;AACAM,MAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqB,YAAM;AACvBD,QAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqB,UAAUC,GAAV,EAAe;AACjCC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACF,SAFD;AAGH,OAJD;AAKH,KAfkB;;AAEf,UAAKG,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,EADJ;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAFe;AAMlB;;;;AAWD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,QAAQ,EAAE,KAAKT,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,WAAD;AAAa,QAAA,WAAW,EAAE,KAAKO,KAAL,CAAWC,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII,oBAAC,SAAD;AAAW,QAAA,YAAY,EAAE,KAAKC,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CADJ;AAQH;;;;EA/DcnB,KAAK,CAACoB,S;;AAkEzB,eAAeb,IAAf","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UsersOnline from './UsersOnline';\nimport openSocket from 'socket.io-client';\nimport Message from '../models/message';\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            usersOnline: [],\n            messages: []\n        };\n    }\n\n    createWS = (nickname) => {\n        const socket = openSocket('http://localhost:5001');\n        socket.on('connect', () => {\n            socket.on('message', function (msg) {\n               console.log(msg);\n            });\n        });\n    }\n\n    // connection = null;\n    //\n    // createWS = (nickname) => {\n    //     this.connection = new WebSocket('ws://127.0.0.1:5000/?nickname=' + nickname);\n    //     this.connection.onopen = () => {\n    //         console.log('WEBSOCKET RUN');\n    //     };\n    //     this.connection.onmessage = (message) => {\n    //         let messageJSON = JSON.parse(message.data);\n    //         switch (messageJSON.channel) {\n    //             case 'usersOnline':\n    //                 this.updateUsersOnline(messageJSON.data);\n    //                 this.updateMessages(new Message(messageJSON.text,\n    //                     messageJSON.type));\n    //                 break;\n    //             case 'messages':\n    //                 this.updateMessages(new Message(messageJSON.text,\n    //                     messageJSON.type));\n    //                 break;\n    //         }\n    //     };\n    // };\n    //\n    // sendToServer = (message) => {\n    //     this.connection.send(message);\n    // };\n    //\n    // updateMessages = (message) => {\n    //     this.setState({messages: this.state.messages.concat(message)});\n    // };\n    //\n    // updateUsersOnline = (users) => {\n    //     this.setState({usersOnline: users});\n    // };\n\n    render() {\n        return(\n            <div>\n                <Login createWS={this.createWS} />\n                <UsersOnline usersOnline={this.state.usersOnline} />\n                <Messages messages={this.state.messages} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}