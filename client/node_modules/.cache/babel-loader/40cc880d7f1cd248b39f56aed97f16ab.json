{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Room.js\";\nimport React from 'react';\nimport Chat from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from \"./Login\";\nimport { Link } from \"react-router-dom\";\nimport UserOnline from \"./UserOnline\";\nimport openSocket from 'socket.io-client';\nimport { updateNav, sendToServer, updateMessages, updateUsersOnline } from \"./Chat\";\nimport '../css/styles.css';\n\nvar Room =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Room, _React$Component);\n\n  function Room(props) {\n    var _this;\n\n    _classCallCheck(this, Room);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Room).call(this, props));\n\n    _this.connectToRoom = function (nickname) {\n      _this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n\n      _this.socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n\n        _this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateMessages(message);\n\n        updateNav({\n          navName: 'ROOM',\n          route: '/'\n        });\n      });\n\n      _this.socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n        _this.updateMessages(message);\n      });\n\n      _this.socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n\n        _this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateMessages(message);\n      });\n    };\n\n    _this.socket = null;\n    _this.state = {\n      usersOnline: [],\n      messages: []\n    }; // this.sendToServer = sendToServer.bind(this);\n    // this.updateMessages = updateMessages.bind(this);\n    // this.updateUsersOnline = updateUsersOnline.bind(this);\n\n    return _this;\n  }\n\n  _createClass(Room, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.socket = null;\n    }\n  }, {\n    key: \"sendToServer\",\n    value: function sendToServer(message) {\n      this.socket.emit('message', message);\n    }\n  }, {\n    key: \"updateMessages\",\n    value: function updateMessages(message) {\n      this.setState({\n        messages: this.state.messages.concat(message)\n      });\n    }\n  }, {\n    key: \"updateUsersOnline\",\n    value: function updateUsersOnline(users) {\n      this.setState({\n        usersOnline: users\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log('ROOM', this.state.messages);\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          connectToPrivate: _this2.connectToPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Login, {\n        createRoom: this.connectToRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"usersOnlineStyle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Room;\n}(React.Component);\n\nexport default Room;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Room.js"],"names":["React","Chat","Messages","ChatInput","Login","Link","UserOnline","openSocket","updateNav","sendToServer","updateMessages","updateUsersOnline","Room","props","connectToRoom","nickname","socket","on","message","console","log","data","usersOnline","navName","route","state","messages","emit","setState","concat","users","map","user","i","connectToPrivate","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAAQC,SAAR,EAAmBC,YAAnB,EAAiCC,cAAjC,EAAiDC,iBAAjD,QAAyE,QAAzE;AACA,OAAO,mBAAP;;IAEMC,I;;;;;AAEF,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8EAAMA,KAAN;;AADe,UA4BnBC,aA5BmB,GA4BH,UAACC,QAAD,EAAc;AAC1B,YAAKC,MAAL,GAAcT,UAAU,CAAC,yCAAyCQ,QAA1C,CAAxB;;AACA,YAAKC,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,UAACC,OAAD,EAAa;AACzCC,QAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ,EAAmFF,OAAnF;;AACA,cAAKP,iBAAL,CAAuBO,OAAO,CAACG,IAAR,CAAaC,WAApC;;AACA,cAAKZ,cAAL,CAAoBQ,OAApB;;AACAV,QAAAA,SAAS,CAAC;AACNe,UAAAA,OAAO,EAAC,MADF;AAENC,UAAAA,KAAK,EAAE;AAFD,SAAD,CAAT;AAIH,OARD;;AASA,YAAKR,MAAL,CAAYC,EAAZ,CAAe,SAAf,EAA0B,UAACC,OAAD,EAAa;AACnCC,QAAAA,OAAO,CAACC,GAAR,CAAY,mEAAZ,EAAiFF,OAAjF;;AACA,cAAKR,cAAL,CAAoBQ,OAApB;AACH,OAHD;;AAIA,YAAKF,MAAL,CAAYC,EAAZ,CAAe,kBAAf,EAAmC,UAACC,OAAD,EAAa;AAC5CC,QAAAA,OAAO,CAACC,GAAR,CAAY,4EAAZ,EAA0FF,OAA1F;;AACA,cAAKP,iBAAL,CAAuBO,OAAO,CAACG,IAAR,CAAaC,WAApC;;AACA,cAAKZ,cAAL,CAAoBQ,OAApB;AACH,OAJD;AAKH,KAhDkB;;AAEf,UAAKF,MAAL,GAAc,IAAd;AACA,UAAKS,KAAL,GAAa;AACTH,MAAAA,WAAW,EAAE,EADJ;AAETI,MAAAA,QAAQ,EAAE;AAFD,KAAb,CAHe,CAOf;AACA;AACA;;AATe;AAUlB;;;;yCAEoB;AACjB,WAAKV,MAAL,GAAc,IAAd;AACH;;;iCAEYE,O,EAAS;AAClB,WAAKF,MAAL,CAAYW,IAAZ,CAAiB,SAAjB,EAA4BT,OAA5B;AACH;;;mCAEcA,O,EAAS;AACpB,WAAKU,QAAL,CAAc;AAACF,QAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAAX,CAAoBG,MAApB,CAA2BX,OAA3B;AAAX,OAAd;AACH;;;sCAEiBY,K,EAAO;AACrB,WAAKF,QAAL,CAAc;AAACN,QAAAA,WAAW,EAAEQ;AAAd,OAAd;AACH;;;6BAwBQ;AAAA;;AACLX,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmB,KAAKK,KAAL,CAAWC,QAA9B;AACA,UAAMJ,WAAW,GAAG,KAAKG,KAAL,CAAWH,WAAX,CAAuBS,GAAvB,CAA2B,UAACC,IAAD,EAAOC,CAAP,EAAa;AACxD,eAAO,oBAAC,UAAD;AAAY,UAAA,GAAG,EAAEA,CAAjB;AAAoB,UAAA,IAAI,EAAED,IAA1B;AACY,UAAA,gBAAgB,EAAE,MAAI,CAACE,gBADnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEH,OAHmB,CAApB;AAIA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,UAAU,EAAE,KAAKpB,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKQ,WADL,CAFJ,EAKI,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAMI,oBAAC,SAAD;AAAW,QAAA,YAAY,EAAE,KAAKjB,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CADJ;AAUH;;;;EApEcT,KAAK,CAACmC,S;;AAuEzB,eAAevB,IAAf","sourcesContent":["import React from 'react';\nimport Chat from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from \"./Login\";\nimport {Link} from \"react-router-dom\";\nimport UserOnline from \"./UserOnline\";\nimport openSocket from 'socket.io-client';\nimport {updateNav, sendToServer, updateMessages, updateUsersOnline} from \"./Chat\";\nimport '../css/styles.css';\n\nclass Room extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.socket = null;\n        this.state = {\n            usersOnline: [],\n            messages: [],\n        };\n        // this.sendToServer = sendToServer.bind(this);\n        // this.updateMessages = updateMessages.bind(this);\n        // this.updateUsersOnline = updateUsersOnline.bind(this);\n    }\n\n    componentWillMount() {\n        this.socket = null;\n    }\n\n    sendToServer(message) {\n        this.socket.emit('message', message);\n    }\n\n    updateMessages(message) {\n        this.setState({messages: this.state.messages.concat(message)});\n    }\n\n    updateUsersOnline(users) {\n        this.setState({usersOnline: users});\n    }\n\n    connectToRoom = (nickname) => {\n        this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n        this.socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n            this.updateUsersOnline(message.data.usersOnline);\n            this.updateMessages(message);\n            updateNav({\n                navName:'ROOM',\n                route: '/'\n            });\n        });\n        this.socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n            this.updateMessages(message);\n        });\n        this.socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n            this.updateUsersOnline(message.data.usersOnline);\n            this.updateMessages(message);\n        });\n    };\n\n    render() {\n        console.log('ROOM',this.state.messages);\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            return <UserOnline key={i} user={user}\n                               connectToPrivate={this.connectToPrivate} />\n        });\n        return (\n            <div>\n                <Login createRoom={this.connectToRoom} />\n                <div className='usersOnlineStyle'>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        )\n    }\n}\n\nexport default Room;"]},"metadata":{},"sourceType":"module"}