{"ast":null,"code":"import _regeneratorRuntime from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UsersOnline from './UsersOnline';\nimport Message from '../models/message';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n    _this.connection = null;\n\n    _this.createWS = function (nickname) {\n      _this.connection = new WebSocket('ws://127.0.0.1:5000/?nickname=' + nickname);\n\n      _this.connection.onopen = function () {\n        console.log('WEBSOCKET RUN');\n\n        _this.apiUsersOnline(nickname).then(function (data) {\n          var dataJSON = JSON.parse(data);\n        });\n      };\n\n      _this.connection.onmessage = function (message) {\n        var messageJSON = JSON.parse(message.data);\n        console.log(messageJSON.data);\n\n        switch (messageJSON.channel) {\n          case 'usersOnline':\n            _this.updateUsersOnline(messageJSON.data);\n\n            _this.updateMessages(new Message(messageJSON.text, messageJSON.type));\n\n            break;\n\n          case 'messages':\n            _this.updateMessages(new Message(messageJSON.text, messageJSON.type));\n\n            break;\n        }\n      };\n    };\n\n    _this.sendToServer = function (message) {\n      _this.connection.send(message);\n    };\n\n    _this.updateMessages = function (message) {\n      _this.setState({\n        messages: _this.state.messages.concat(message)\n      });\n    };\n\n    _this.apiUsersOnline =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(nickname) {\n        var response, body;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch('/users-online/' + nickname);\n\n              case 2:\n                response = _context.sent;\n                _context.next = 5;\n                return response.json();\n\n              case 5:\n                body = _context.sent;\n\n                if (!(response.status !== 200)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw Error(body.message);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.updateUsersOnline = function (users) {\n      _this.setState({\n        usersOnline: users\n      });\n    };\n\n    _this.state = {\n      usersOnline: [],\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Login, {\n        createWS: this.createWS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(UsersOnline, {\n        usersOnline: this.state.usersOnline,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat; // export {updateMessages};","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UsersOnline","Message","Chat","props","connection","createWS","nickname","WebSocket","onopen","console","log","apiUsersOnline","then","data","dataJSON","JSON","parse","onmessage","message","messageJSON","channel","updateUsersOnline","updateMessages","text","type","sendToServer","send","setState","messages","state","concat","fetch","response","json","body","status","Error","users","usersOnline","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UsersOnline from './UsersOnline';\nimport Message from '../models/message';\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            usersOnline: [],\n            messages: []\n        };\n    }\n\n    connection = null;\n\n    createWS = (nickname) => {\n        this.connection = new WebSocket('ws://127.0.0.1:5000/?nickname=' + nickname);\n        this.connection.onopen = () => {\n            console.log('WEBSOCKET RUN');\n            this.apiUsersOnline(nickname)\n                .then(data => {\n                    let dataJSON = JSON.parse(data);\n                });\n        };\n        this.connection.onmessage = (message) => {\n            let messageJSON = JSON.parse(message.data);\n            console.log(messageJSON.data);\n            switch (messageJSON.channel) {\n                case 'usersOnline':\n                    this.updateUsersOnline(messageJSON.data);\n                    this.updateMessages(new Message(messageJSON.text,\n                        messageJSON.type));\n                    break;\n                case 'messages':\n                    this.updateMessages(new Message(messageJSON.text,\n                        messageJSON.type));\n                    break;\n            }\n        };\n    };\n\n    sendToServer = (message) => {\n        this.connection.send(message);\n    };\n\n    updateMessages = (message) => {\n        this.setState({messages: this.state.messages.concat(message)});\n    };\n\n    apiUsersOnline = async (nickname) => {\n        const response = await fetch('/users-online/' + nickname);\n        const body = await response.json();\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n        // return body;\n    };\n\n    updateUsersOnline = (users) => {\n        this.setState({usersOnline: users});\n    };\n\n    render() {\n        return (\n            <div>\n                <Login createWS={this.createWS} />\n                <div>\n                    <UsersOnline usersOnline={this.state.usersOnline}/>\n                    <Messages messages={this.state.messages} />\n                </div>\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;\n// export {updateMessages};"]},"metadata":{},"sourceType":"module"}