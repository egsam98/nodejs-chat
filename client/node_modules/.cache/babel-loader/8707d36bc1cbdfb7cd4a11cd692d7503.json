{"ast":null,"code":"var _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport About from './About';\nimport Chat, { updateNav } from './Chat/Chat';\nimport Private, { pathToPrivateChat } from './Chat/Private';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport openSocket from 'socket.io-client';\nvar socket = null;\n\nfunction connectToWS(nickname) {\n  var _this = this;\n\n  socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n  socket.on('userConnected', function (message) {\n    console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n\n    _this.setState({\n      usersOnline: message.data.usersOnline\n    });\n\n    _this.setState({\n      messages: _this.state.messages.concat(message)\n    });\n\n    updateNav({\n      navName: 'ROOM',\n      route: '/'\n    });\n  });\n  socket.on('message', function (message) {\n    console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n    _this.setState({\n      messages: _this.state.messages.concat(message)\n    });\n  });\n  socket.on('userDisconnected', function (message) {\n    console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n\n    _this.setState({\n      usersOnline: message.data.usersOnline\n    });\n\n    _this.setState({\n      messages: _this.state.messages.concat(message)\n    });\n  });\n}\n\nfunction connectToPrivate(partner) {\n  var _this2 = this;\n\n  fetch('/session/user').then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    console.log(data);\n    var conversationId = data.user.id + '-' + partner.id;\n    socket = openSocket(\"http://localhost:5000/private?conversationId=\".concat(conversationId));\n    socket.on('established', function (message) {\n      console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n      updateNav({\n        navName: partner.nickname,\n        route: pathToPrivateChat + partner.nickname\n      });\n\n      _this2.setState({\n        messages: _this2.state.messages.concat(message)\n      });\n    });\n    socket.on('message', function (message) {\n      console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n\n      _this2.setState({\n        messages: _this2.state.messages.concat(message)\n      });\n    }); // this.socket.on('demolished', (message) => {\n    //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n    //     this.updateUsersOnline(message.data.usersOnline);\n    //     this.updateMessages(message);\n    // });\n  });\n}\n\nfunction sendToServer(message) {\n  socket.emit('message', message);\n}\n\nReactDOM.render(React.createElement(Router, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n}, React.createElement(Switch, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"/\",\n  component: Chat,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}), React.createElement(Route, {\n  path: \"/about\",\n  component: About,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n}), React.createElement(Redirect, {\n  to: '/',\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 65\n  },\n  __self: this\n}))), document.getElementById('root'));\nexport { connectToWS, sendToServer, connectToPrivate };","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/index.js"],"names":["React","ReactDOM","About","Chat","updateNav","Private","pathToPrivateChat","BrowserRouter","Router","Route","Switch","Redirect","openSocket","socket","connectToWS","nickname","on","message","console","log","setState","usersOnline","data","messages","state","concat","navName","route","connectToPrivate","partner","fetch","then","res","json","conversationId","user","id","sendToServer","emit","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport About from './About';\nimport Chat, {updateNav} from './Chat/Chat';\nimport Private, {pathToPrivateChat} from './Chat/Private';\nimport {BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\nimport openSocket from 'socket.io-client';\n\nlet socket = null;\nfunction connectToWS(nickname) {\n    socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n    socket.on('userConnected', (message) => {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n        this.setState({usersOnline: message.data.usersOnline});\n        this.setState({messages: this.state.messages.concat(message)});\n        updateNav({\n            navName:'ROOM',\n            route: '/'\n        });\n    });\n    socket.on('message', (message) => {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n        this.setState({messages: this.state.messages.concat(message)});\n    });\n    socket.on('userDisconnected', (message) => {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n        this.setState({usersOnline: message.data.usersOnline});\n        this.setState({messages: this.state.messages.concat(message)});\n    });\n}\nfunction connectToPrivate(partner) {\n    fetch('/session/user').then(res => res.json()).then(data => {\n        console.log(data);\n        let conversationId = (data.user.id + '-' + partner.id);\n        socket = openSocket(`http://localhost:5000/private?conversationId=${conversationId}`);\n        socket.on('established', (message) => {\n            console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message);\n            // this.updateUsersOnline(message.data.usersOnline);\n            updateNav({\n                navName: partner.nickname,\n                route: pathToPrivateChat+partner.nickname\n            });\n            this.setState({messages: this.state.messages.concat(message)});\n        });\n        socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n            this.setState({messages: this.state.messages.concat(message)});\n        });\n        // this.socket.on('demolished', (message) => {\n        //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n        //     this.updateUsersOnline(message.data.usersOnline);\n        //     this.updateMessages(message);\n        // });\n    });\n}\nfunction sendToServer(message) {\n    socket.emit('message', message);\n}\n\nReactDOM.render(\n    <Router>\n        <Switch>\n            <Route path=\"/\" component={Chat}/>\n            <Route path=\"/about\" component={About}/>\n            <Redirect to={'/'} />\n        </Switch>\n    </Router>\n    , document.getElementById('root'));\n\n\nexport {connectToWS, sendToServer, connectToPrivate};\n"]},"metadata":{},"sourceType":"module"}