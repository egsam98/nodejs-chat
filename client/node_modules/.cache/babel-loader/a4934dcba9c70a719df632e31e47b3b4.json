{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Private.js\";\nimport React from 'react';\nimport openSocket from 'socket.io-client';\nimport { updateNav, sendToServer, updateMessages, updateUsersOnline } from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport '../css/styles.css';\nimport UserOnline from \"./UserOnline\";\nvar pathToPrivateChat = '/private/';\n\nvar Private =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Private, _React$Component);\n\n  function Private(props) {\n    var _this;\n\n    _classCallCheck(this, Private);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Private).call(this, props));\n\n    _this.connectToPrivate = function () {\n      fetch('/session/user').then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        var conversationId = data.user.id + '-' + _this.partner.id;\n        _this.socket = openSocket(\"http://localhost:5000/private?conversationId=\".concat(conversationId));\n\n        _this.socket.on('established', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n          updateNav({\n            navName: _this.partner.nickname,\n            route: pathToPrivateChat + _this.partner.nickname\n          });\n\n          _this.updateMessages(message);\n        });\n\n        _this.socket.on('message', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n\n          _this.updateMessages(message);\n        }); // this.socket.on('demolished', (message) => {\n        //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n        //     this.updateUsersOnline(message.data.usersOnline);\n        //     this.updateMessages(message);\n        // });\n\n      });\n    };\n\n    _this.socket = null;\n    _this.state = {\n      usersOnline: [],\n      messages: []\n    }; // this.updateMessages = updateMessages.bind(this);\n    // this.updateUsersOnline = updateUsersOnline.bind(this);\n    // this.sendToServer = sendToServer.bind(this);\n\n    return _this;\n  }\n\n  _createClass(Private, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var params = new URLSearchParams(this.props.location.search);\n      this.partner = {\n        id: params.get('id'),\n        nickname: params.get('nickname')\n      };\n      document.title = 'Private with ' + this.partner.nickname;\n      if (this.socket === null) this.connectToPrivate();\n    }\n  }, {\n    key: \"sendToServer\",\n    value: function sendToServer(message) {\n      this.socket.emit('message', message);\n    }\n  }, {\n    key: \"updateMessages\",\n    value: function updateMessages(message) {\n      this.setState({\n        messages: this.state.messages.concat(message)\n      });\n    }\n  }, {\n    key: \"updateUsersOnline\",\n    value: function updateUsersOnline(users) {\n      this.setState({\n        usersOnline: users\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log('PRIVATE', this.state.messages);\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          path: _this2.props.pathToPrivateChat,\n          conversationId: _this2.conversationId,\n          connectToPrivate: _this2.connectToPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"ALLLLLLLLLLLLOOOOOOOOOOO\", React.createElement(\"div\", {\n        className: \"usersOnlineStyle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Private;\n}(React.Component);\n\nexport default Private;\nexport { pathToPrivateChat };","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Private.js"],"names":["React","openSocket","updateNav","sendToServer","updateMessages","updateUsersOnline","Messages","ChatInput","UserOnline","pathToPrivateChat","Private","props","connectToPrivate","fetch","then","res","json","data","conversationId","user","id","partner","socket","on","message","console","log","navName","nickname","route","state","usersOnline","messages","params","URLSearchParams","location","search","get","document","title","emit","setState","concat","users","map","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport openSocket from 'socket.io-client';\nimport {updateNav, sendToServer, updateMessages, updateUsersOnline} from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport '../css/styles.css';\nimport UserOnline from \"./UserOnline\";\nconst pathToPrivateChat = '/private/';\n\nclass Private extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.socket = null;\n        this.state = {\n            usersOnline: [],\n            messages: [],\n        };\n        // this.updateMessages = updateMessages.bind(this);\n        // this.updateUsersOnline = updateUsersOnline.bind(this);\n        // this.sendToServer = sendToServer.bind(this);\n    }\n\n\n    componentDidMount() {\n        const params = new URLSearchParams(this.props.location.search);\n        this.partner = {\n            id: params.get('id'),\n            nickname: params.get('nickname')\n        };\n        document.title = 'Private with ' + this.partner.nickname;\n        if (this.socket === null)\n            this.connectToPrivate();\n    }\n\n    connectToPrivate = () => {\n        fetch('/session/user').then(res => res.json()).then(data => {\n            let conversationId = (data.user.id + '-' + this.partner.id);\n            this.socket = openSocket(`http://localhost:5000/private?conversationId=${conversationId}`);\n            this.socket.on('established', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message);\n                // this.updateUsersOnline(message.data.usersOnline);\n                updateNav({\n                    navName: this.partner.nickname,\n                    route: pathToPrivateChat+this.partner.nickname\n                });\n                this.updateMessages(message);\n            });\n            this.socket.on('message', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n                this.updateMessages(message);\n            });\n            // this.socket.on('demolished', (message) => {\n            //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n            //     this.updateUsersOnline(message.data.usersOnline);\n            //     this.updateMessages(message);\n            // });\n        });\n    };\n\n    sendToServer(message) {\n        this.socket.emit('message', message);\n    }\n\n    updateMessages(message) {\n        this.setState({messages: this.state.messages.concat(message)});\n    }\n\n    updateUsersOnline(users) {\n        this.setState({usersOnline: users});\n    }\n    \n    render() {\n        console.log('PRIVATE', this.state.messages);\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            return <UserOnline key={i} user={user} path={this.props.pathToPrivateChat}\n                               conversationId={this.conversationId}\n                               connectToPrivate={this.connectToPrivate} />\n        });\n        return (\n            <div>\n                ALLLLLLLLLLLLOOOOOOOOOOO\n                <div className='usersOnlineStyle'>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        )\n    }\n}\n\nexport default Private;\nexport {pathToPrivateChat};"]},"metadata":{},"sourceType":"module"}