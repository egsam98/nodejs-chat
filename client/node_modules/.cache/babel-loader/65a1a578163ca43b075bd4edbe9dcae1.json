{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport openSocket from 'socket.io-client';\nimport UserOnline from \"./UserOnline\";\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport Private from './Private/Private'; // import Cookies from \"universal-cookie\";\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props)); // fetch('/session/user').then(res => res.json()).then(data => {\n    //     console.log('ID', data.user.id);\n    //     this.conversationId = data.user.id;\n    // });\n\n    _this.createRoom = function (nickname) {\n      _this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n\n      _this.socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n\n        _this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateMessages(message);\n      });\n\n      _this.socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n        _this.updateMessages(message);\n      });\n\n      _this.socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n\n        _this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateMessages(message);\n      });\n\n      _this.setState({\n        nav: _this.state.nav.concat(React.createElement(\"a\", {\n          className: \"nav-item nav-link\",\n          href: \"#\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, rooms))\n      });\n    };\n\n    _this.createPrivate = function (personId) {\n      fetch('/session/user').then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        var conversationId = data.user.id + '-' + personId;\n        console.log(conversationId);\n        _this.socket = openSocket(\"http://localhost:5000/private?conversationId=\".concat(conversationId));\n\n        _this.socket.on('established', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n          window.open(\"http://localhost:5000/private/\".concat(conversationId), '_blank');\n\n          _this.updateMessages(message);\n        });\n\n        _this.socket.on('message', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n\n          _this.updateMessages(message);\n        }); // this.socket.on('demolished', (message) => {\n        //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n        //     this.updateUsersOnline(message.data.usersOnline);\n        //     this.updateMessages(message);\n        // });\n\n      });\n    };\n\n    _this.sendToServer = function (message) {\n      _this.socket.emit('message', message);\n    };\n\n    _this.updateMessages = function (message) {\n      _this.setState({\n        messages: _this.state.messages.concat(message)\n      });\n    };\n\n    _this.updateUsersOnline = function (users) {\n      _this.setState({\n        usersOnline: users\n      });\n    };\n\n    _this.pathToPrivateChat = '/private/';\n    _this.socket = null;\n    _this.state = {\n      usersOnline: [],\n      messages: [],\n      nav: []\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var navBar = React.createElement(\"nav\", {\n        className: \"navbar navbar-expand-lg navbar-light bg-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Chat\")), React.createElement(\"button\", {\n        className: \"navbar-toggler\",\n        type: \"button\",\n        \"data-toggle\": \"collapse\",\n        \"data-target\": \"#navbarNavAltMarkup\",\n        \"aria-controls\": \"navbarNavAltMarkup\",\n        \"aria-expanded\": \"false\",\n        \"aria-label\": \"Toggle navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"navbar-toggler-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"collapse navbar-collapse\",\n        id: \"navbarNavAltMarkup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"nav-item nav-link active\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Home \", React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"(current)\")), React.createElement(\"a\", {\n        className: \"nav-item nav-link\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Features\"))));\n      var usersOnlineStyle = {\n        float: 'right',\n        width: '400px',\n        height: '600px',\n        border: 'black 2px solid',\n        padding: '20px'\n      };\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          path: _this2.pathToPrivateChat,\n          createPrivate: _this2.createPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, navBar, React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"\".concat(this.pathToPrivateChat, \":id\"),\n        render: function render(props) {\n          return React.createElement(Private, Object.assign({}, props, {\n            createPrivate: _this2.createPrivate,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: '/',\n        render: function render() {\n          return React.createElement(Login, {\n            createRoom: _this2.createRoom,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        style: usersOnlineStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","openSocket","UserOnline","BrowserRouter","Router","Route","Switch","Redirect","Link","Private","Chat","props","createRoom","nickname","socket","on","message","console","log","updateUsersOnline","data","usersOnline","updateMessages","setState","nav","state","concat","rooms","createPrivate","personId","fetch","then","res","json","conversationId","user","id","window","open","sendToServer","emit","messages","users","pathToPrivateChat","navBar","usersOnlineStyle","float","width","height","border","padding","map","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport openSocket from 'socket.io-client';\nimport UserOnline from \"./UserOnline\";\nimport {BrowserRouter as Router, Route, Switch, Redirect, Link} from \"react-router-dom\";\nimport Private from './Private/Private';\n// import Cookies from \"universal-cookie\";\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n\n        // fetch('/session/user').then(res => res.json()).then(data => {\n        //     console.log('ID', data.user.id);\n        //     this.conversationId = data.user.id;\n        // });\n        this.pathToPrivateChat = '/private/';\n        this.socket = null;\n        this.state = {\n            usersOnline: [],\n            messages: [],\n            nav: []\n        };\n    }\n\n    createRoom = (nickname) => {\n        this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n        this.socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n            this.updateUsersOnline(message.data.usersOnline);\n            this.updateMessages(message);\n        });\n        this.socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n            this.updateMessages(message);\n        });\n        this.socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n            this.updateUsersOnline(message.data.usersOnline);\n            this.updateMessages(message);\n        });\n\n        this.setState({nav: this.state.nav.concat(<a className=\"nav-item nav-link\"\n                                                     href=\"#\">{rooms}</a>)})\n    };\n\n    createPrivate = (personId) => {\n        fetch('/session/user').then(res => res.json()).then(data => {\n            let conversationId = (data.user.id + '-' + personId);\n            console.log(conversationId);\n            this.socket = openSocket(`http://localhost:5000/private?conversationId=${conversationId}`);\n            this.socket.on('established', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message);\n                // this.updateUsersOnline(message.data.usersOnline);\n                window.open(`http://localhost:5000/private/${conversationId}`, '_blank');\n                this.updateMessages(message);\n            });\n            this.socket.on('message', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n                this.updateMessages(message);\n            });\n            // this.socket.on('demolished', (message) => {\n            //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n            //     this.updateUsersOnline(message.data.usersOnline);\n            //     this.updateMessages(message);\n            // });\n        });\n    };\n\n    sendToServer = (message) => {\n        this.socket.emit('message', message);\n    };\n\n    updateMessages = (message) => {\n        this.setState({messages: this.state.messages.concat(message)});\n    };\n\n    updateUsersOnline = (users) => {\n        this.setState({usersOnline: users});\n    };\n\n    render() {\n        const navBar = (\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <a className=\"navbar-brand\" href=\"#\">\n                    <h3>Chat</h3>\n                </a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\"\n                        aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\" />\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                    <div className=\"navbar-nav\">\n                        <a className=\"nav-item nav-link active\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n                        <a className=\"nav-item nav-link\" href=\"#\">Features</a>\n                    </div>\n                </div>\n            </nav>\n        );\n        const usersOnlineStyle = {\n            float: 'right',\n            width: '400px',\n            height: '600px',\n            border: 'black 2px solid',\n            padding: '20px'\n        };\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            return <UserOnline key={i} user={user} path={this.pathToPrivateChat} createPrivate={this.createPrivate} />\n        });\n        return(\n            <div>\n                {navBar}\n                <Router>\n                    <Switch>\n                        <Route path={`${this.pathToPrivateChat}:id`}\n                               render={(props) => <Private {...props} createPrivate={this.createPrivate}/>}/>\n                        {/*<Redirect from={'/:path'} to={'/'} />*/}\n                        <Route path={'/'} render={() => <Login createRoom={this.createRoom} />} />\n                    </Switch>\n                </Router>\n                <div style={usersOnlineStyle}>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}