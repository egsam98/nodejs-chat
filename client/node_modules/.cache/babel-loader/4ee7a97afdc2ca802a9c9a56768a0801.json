{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Private.js\";\nimport React from 'react';\nimport openSocket from 'socket.io-client';\nimport { updateNav, sendToServer, updateMessages, updateUsersOnline } from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport '../css/styles.css';\nimport UserOnline from \"./UserOnline\";\nvar pathToPrivateChat = '/private/';\n\nfunction connectToPrivate() {\n  var _this = this;\n\n  fetch('/session/user').then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    var conversationId = data.user.id + '-' + _this.partner.id;\n    _this.socket = openSocket(\"http://localhost:5000/private?conversationId=\".concat(conversationId));\n\n    _this.socket.on('established', function (message) {\n      console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n      updateNav({\n        navName: _this.partner.nickname,\n        route: pathToPrivateChat + _this.partner.nickname\n      });\n\n      _this.updateMessages(message);\n    });\n\n    _this.socket.on('message', function (message) {\n      console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n\n      _this.updateMessages(message);\n    }); // this.socket.on('demolished', (message) => {\n    //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n    //     this.updateUsersOnline(message.data.usersOnline);\n    //     this.updateMessages(message);\n    // });\n\n  });\n}\n\nvar Private =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Private, _React$Component);\n\n  function Private(props) {\n    var _this2;\n\n    _classCallCheck(this, Private);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Private).call(this, props));\n    _this2.socket = null;\n    _this2.state = {\n      usersOnline: [],\n      messages: []\n    };\n    connectToPrivate = connectToPrivate.bind(_assertThisInitialized(_assertThisInitialized(_this2))); // this.updateMessages = updateMessages.bind(this);\n    // this.updateUsersOnline = updateUsersOnline.bind(this);\n    // this.sendToServer = sendToServer.bind(this);\n\n    return _this2;\n  }\n\n  _createClass(Private, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var params = new URLSearchParams(this.props.location.search);\n      this.partner = {\n        id: params.get('id'),\n        nickname: params.get('nickname')\n      };\n      document.title = 'Private with ' + this.partner.nickname; // this.connectToPrivate();\n    }\n  }, {\n    key: \"sendToServer\",\n    value: function sendToServer(message) {\n      this.socket.emit('message', message);\n    }\n  }, {\n    key: \"updateMessages\",\n    value: function updateMessages(message) {\n      this.setState({\n        messages: this.state.messages.concat(message)\n      });\n    }\n  }, {\n    key: \"updateUsersOnline\",\n    value: function updateUsersOnline(users) {\n      this.setState({\n        usersOnline: users\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      console.log('PRIV', this.state.messages);\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          path: _this3.props.pathToPrivateChat,\n          conversationId: _this3.conversationId,\n          connectToPrivate: _this3.connectToPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"ALLLLLLLLLLLLOOOOOOOOOOO\", React.createElement(\"div\", {\n        className: \"usersOnlineStyle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Private;\n}(React.Component);\n\nexport default Private;\nexport { pathToPrivateChat, connectToPrivate };","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Private.js"],"names":["React","openSocket","updateNav","sendToServer","updateMessages","updateUsersOnline","Messages","ChatInput","UserOnline","pathToPrivateChat","connectToPrivate","fetch","then","res","json","data","conversationId","user","id","partner","socket","on","message","console","log","navName","nickname","route","Private","props","state","usersOnline","messages","bind","params","URLSearchParams","location","search","get","document","title","emit","setState","concat","users","map","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport openSocket from 'socket.io-client';\nimport {updateNav, sendToServer, updateMessages, updateUsersOnline} from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport '../css/styles.css';\nimport UserOnline from \"./UserOnline\";\nconst pathToPrivateChat = '/private/';\n\nfunction connectToPrivate() {\n    fetch('/session/user').then(res => res.json()).then(data => {\n        let conversationId = (data.user.id + '-' + this.partner.id);\n        this.socket = openSocket(`http://localhost:5000/private?conversationId=${conversationId}`);\n        this.socket.on('established', (message) => {\n            console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message);\n            // this.updateUsersOnline(message.data.usersOnline);\n            updateNav({\n                navName: this.partner.nickname,\n                route: pathToPrivateChat+this.partner.nickname\n            });\n            this.updateMessages(message);\n        });\n        this.socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n            this.updateMessages(message);\n        });\n        // this.socket.on('demolished', (message) => {\n        //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n        //     this.updateUsersOnline(message.data.usersOnline);\n        //     this.updateMessages(message);\n        // });\n    });\n}\n\nclass Private extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.socket = null;\n        this.state = {\n            usersOnline: [],\n            messages: [],\n        };\n        connectToPrivate = connectToPrivate.bind(this);\n        // this.updateMessages = updateMessages.bind(this);\n        // this.updateUsersOnline = updateUsersOnline.bind(this);\n        // this.sendToServer = sendToServer.bind(this);\n    }\n\n\n    componentDidMount() {\n        const params = new URLSearchParams(this.props.location.search);\n        this.partner = {\n            id: params.get('id'),\n            nickname: params.get('nickname')\n        };\n        document.title = 'Private with ' + this.partner.nickname;\n        // this.connectToPrivate();\n    }\n\n\n\n    sendToServer(message) {\n        this.socket.emit('message', message);\n    }\n\n    updateMessages(message) {\n        this.setState({messages: this.state.messages.concat(message)});\n    }\n\n    updateUsersOnline(users) {\n        this.setState({usersOnline: users});\n    }\n    \n    render() {\n        console.log('PRIV', this.state.messages);\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            return <UserOnline key={i} user={user} path={this.props.pathToPrivateChat}\n                               conversationId={this.conversationId}\n                               connectToPrivate={this.connectToPrivate} />\n        });\n        return (\n            <div>\n                ALLLLLLLLLLLLOOOOOOOOOOO\n                <div className='usersOnlineStyle'>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        )\n    }\n}\n\nexport default Private;\nexport {pathToPrivateChat, connectToPrivate};"]},"metadata":{},"sourceType":"module"}