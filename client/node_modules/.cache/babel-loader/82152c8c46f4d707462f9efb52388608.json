{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport openSocket from 'socket.io-client';\nimport UserOnline from \"./UserOnline\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Test from './PrivateRoom/Test';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _this.createWS = function (nickname) {\n      _this.socket = openSocket('http://localhost:5000?nickname=' + nickname);\n\n      _this.socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'userConnected\\' channel:', message);\n\n        _this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateMessages(message);\n      });\n\n      _this.socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'message\\' channel:', message);\n\n        _this.updateMessages(message);\n      });\n\n      _this.socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'userDisconnected\\' channel:', message);\n\n        _this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateMessages(message);\n      });\n    };\n\n    _this.sendToServer = function (message) {\n      _this.socket.emit('message', message);\n    };\n\n    _this.updateMessages = function (message) {\n      _this.setState({\n        messages: _this.state.messages.concat(message)\n      });\n    };\n\n    _this.updateUsersOnline = function (users) {\n      _this.setState({\n        usersOnline: users\n      });\n    };\n\n    _this.socket = null;\n    _this.state = {\n      usersOnline: [],\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var usersOnlineStyle = {\n        float: 'right',\n        width: '400px',\n        height: '600px',\n        border: 'black 2px solid',\n        padding: '20px'\n      };\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        return React.createElement(Route, {\n          path: \"\".concat(_this2.props.match.path, \"/a\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }));\n      });\n      var history = createMemoryHistory({\n        initialEntries: ['/foo']\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Router, {\n        history: history,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/a\",\n        component: Test,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }))), React.createElement(Login, {\n        createWS: this.createWS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: usersOnlineStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","openSocket","UserOnline","BrowserRouter","Router","Route","Switch","Test","Chat","props","createWS","nickname","socket","on","message","console","log","updateUsersOnline","data","usersOnline","updateMessages","sendToServer","emit","setState","messages","state","concat","users","usersOnlineStyle","float","width","height","border","padding","map","user","i","match","path","history","createMemoryHistory","initialEntries","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport openSocket from 'socket.io-client';\nimport UserOnline from \"./UserOnline\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Test from './PrivateRoom/Test';\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.socket = null;\n        this.state = {\n            usersOnline: [],\n            messages: []\n        };\n    }\n\n    createWS = (nickname) => {\n        this.socket = openSocket('http://localhost:5000?nickname=' + nickname);\n        this.socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'userConnected\\' channel:', message);\n            this.updateUsersOnline(message.data.usersOnline);\n            this.updateMessages(message);\n        });\n        this.socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'message\\' channel:', message);\n            this.updateMessages(message);\n        });\n        this.socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'userDisconnected\\' channel:', message);\n            this.updateUsersOnline(message.data.usersOnline);\n            this.updateMessages(message);\n        });\n    };\n\n    sendToServer = (message) => {\n        this.socket.emit('message', message);\n    };\n\n    updateMessages = (message) => {\n        this.setState({messages: this.state.messages.concat(message)});\n    };\n\n    updateUsersOnline = (users) => {\n        this.setState({usersOnline: users});\n    };\n\n    render() {\n        const usersOnlineStyle = {\n            float: 'right',\n            width: '400px',\n            height: '600px',\n            border: 'black 2px solid',\n            padding: '20px'\n        };\n\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            return <Route path={`${this.props.match.path}/a`}>\n                    <UserOnline key={i} user={user}/>\n                </Route>\n        });\n        const history = createMemoryHistory({ initialEntries: ['/foo'] })\n        return(\n            <div>\n                <Router history={history}>\n                    <Switch>\n                        <Route path=\"/a\" component={Test}/>\n                    </Switch>\n                </Router>\n                <Login createWS={this.createWS} />\n                <div style={usersOnlineStyle}>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}