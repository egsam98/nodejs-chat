{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\nimport { withCookies, Cookies } from 'react-cookie';\n\nfunction reverseString(s) {\n  return s.split(\"\").reverse().join(\"\");\n}\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _this.connectToRoom = function (nickname) {\n      var socket = openSocket('http://localhost:5000?nickname=' + nickname);\n      socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message); // this.session.id = message.data.id;\n        // this.session.nickname = message.data.nickname;\n        // const { cookies } = this.props;\n        // console.log(cookies)\n        // if (!cookies.get('id'))\n        //     cookies.set('id', message.data.id, { path: '/' });\n\n        if (!_this.state.sessionId) _this.setState({\n          sessionId: message.data.id\n        });\n\n        _this.setState({\n          usersOnline: message.data.usersOnline\n        });\n\n        _this.roomMessages.push(message);\n\n        _this.setState({\n          messages: _this.roomMessages,\n          sockets: _this.state.sockets.concat(socket),\n          currentSocket: socket\n        });\n\n        _this.updateNav({\n          navName: _this._ROOM_NAV_NAME,\n          messagesStore: _this._ROOM_MESSAGE_STORE,\n          socket: socket\n        });\n      });\n      socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n        _this.roomMessages.push(message);\n\n        _this.setState({\n          messages: _this.roomMessages\n        });\n      });\n      socket.on('join', function (message) {\n        console.log('Websocket: broadcast from \\'join\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n        var partner = {\n          id: message.data.conversationId.split('-')[0],\n          nickname: message.data.navName\n        };\n\n        _this.connectToPrivate(partner, true);\n      });\n      socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'userDisconnected\\' channel:', message);\n\n        _this.setState({\n          usersOnline: message.data.usersOnline\n        });\n\n        _this.roomMessages.push(message); // this.setState({\n        //     messages: this.roomMessages,\n        // });\n\n      });\n    };\n\n    _this.connectToPrivate = function (partner) {\n      var isReverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var conversationId = _this.state.sessionId + '-' + partner.id;\n      if (isReverse) conversationId = reverseString(conversationId);\n      var socket = openSocket(\"http://localhost:5000/?conversationId=\".concat(conversationId));\n      socket.on('established', function (message) {\n        console.log('Websocket: broadcast \\'established\\' channel:', message);\n\n        _this.updateNav({\n          navName: partner.nickname,\n          messagesStore: conversationId,\n          socket: socket\n        });\n\n        if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = [];\n\n        _this.privateMessages[conversationId].push(message); // this.setState({\n        //     messages: this.privateMessages[conversationId],\n        //     currentSocket: socket\n        // });\n\n      });\n      socket.on('privateMessage', function (message) {\n        console.log('Websocket: broadcast from \\'privateMessage\\' channel:', message);\n        if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = [];\n\n        _this.privateMessages[conversationId].push(message); // this.setState({\n        //     messages: this.privateMessages[conversationId],\n        // });\n\n      }); // this.socket.on('demolished', (message) => {\n      //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n      //     this.updateUsersOnline(message.data.usersOnline);\n      //     this.updateMessages(message);\n      // });\n    };\n\n    _this.sendToServer = function (message) {\n      _this.state.currentSocket.emit('message', message);\n    };\n\n    _this.updateNav = function (nav) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.state.nav[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var navSaved = _step.value;\n          if (navSaved.messagesStore === nav.messagesStore) return;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.setState({\n        nav: _this.state.nav.concat(nav)\n      });\n    };\n\n    _this._ROOM_NAV_NAME = 'ROOM';\n    _this._ROOM_MESSAGE_STORE = 'ROOM';\n    _this.roomMessages = [];\n    _this.privateMessages = {};\n    _this.state = {\n      sessionId: null,\n      sockets: [],\n      currentSocket: null,\n      nav: [],\n      usersOnline: [],\n      messages: []\n    }; // this.session = {\n    //     id: null,\n    //     nickname: null\n    // }\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var nav = this.state.nav.map(function (item, i) {\n        return React.createElement(Link, {\n          to: '#',\n          className: \"nav-item nav-link\",\n          key: i,\n          onClick: function onClick() {\n            if (item.messagesStore === _this2._ROOM_MESSAGE_STORE) _this2.setState({\n              messages: _this2.roomMessages\n            });else _this2.setState({\n              messages: _this2.privateMessages[item.messagesStore]\n            });\n\n            _this2.setState({\n              currentSocket: item.socket\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, item.navName);\n      });\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        user.nickname += user.id === _this2.state.sessionId && user.nickname.indexOf('(Вы)') === -1 ? ' (Вы)' : '';\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          sessionId: _this2.state.sessionId,\n          roomName: _this2._ROOM_NAV_NAME,\n          connectToPrivate: _this2.connectToPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-expand-lg navbar-light bg-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Chat\")), React.createElement(\"button\", {\n        className: \"navbar-toggler\",\n        type: \"button\",\n        \"data-toggle\": \"collapse\",\n        \"data-target\": \"#navbarNavAltMarkup\",\n        \"aria-controls\": \"navbarNavAltMarkup\",\n        \"aria-expanded\": \"false\",\n        \"aria-label\": \"Toggle navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"navbar-toggler-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"collapse navbar-collapse\",\n        id: \"navbarNavAltMarkup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, nav))), React.createElement(Login, {\n        connectToRoom: this.connectToRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"usersOnlineStyle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0438 \\u0432 \\u043A\\u043E\\u043C\\u043D\\u0430\\u0442\\u0435 \\\"\", this._ROOM_NAV_NAME, \"\\\": \"), usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default withCookies(Chat);","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UserOnline","BrowserRouter","Router","Route","Switch","Redirect","Link","openSocket","withCookies","Cookies","reverseString","s","split","reverse","join","Chat","props","connectToRoom","nickname","socket","on","message","console","log","state","sessionId","setState","data","id","usersOnline","roomMessages","push","messages","sockets","concat","currentSocket","updateNav","navName","_ROOM_NAV_NAME","messagesStore","_ROOM_MESSAGE_STORE","partner","conversationId","connectToPrivate","isReverse","privateMessages","sendToServer","emit","nav","navSaved","map","item","i","user","indexOf","fontWeight","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,aAAa,IAAIC,MAAzB,EAAiCC,KAAjC,EAAwCC,MAAxC,EAAgDC,QAAhD,EAA0DC,IAA1D,QAAqE,kBAArE;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,cAArC;;AAEA,SAASC,aAAT,CAAuBC,CAAvB,EAAyB;AACrB,SAAOA,CAAC,CAACC,KAAF,CAAQ,EAAR,EAAYC,OAAZ,GAAsBC,IAAtB,CAA2B,EAA3B,CAAP;AACH;;IAEKC,I;;;;;AAEF,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8EAAMA,KAAN;;AADe,UAoBnBC,aApBmB,GAoBH,UAACC,QAAD,EAAc;AAC1B,UAAMC,MAAM,GAAGZ,UAAU,CAAC,oCAAoCW,QAArC,CAAzB;AACAC,MAAAA,MAAM,CAACC,EAAP,CAAU,eAAV,EAA2B,UAACC,OAAD,EAAa;AACpCC,QAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ,EAAmFF,OAAnF,EADoC,CAEpC;AACA;AACA;AACA;AACA;AACA;;AACA,YAAI,CAAC,MAAKG,KAAL,CAAWC,SAAhB,EACI,MAAKC,QAAL,CAAc;AAACD,UAAAA,SAAS,EAAEJ,OAAO,CAACM,IAAR,CAAaC;AAAzB,SAAd;;AACJ,cAAKF,QAAL,CAAc;AAACG,UAAAA,WAAW,EAAER,OAAO,CAACM,IAAR,CAAaE;AAA3B,SAAd;;AACA,cAAKC,YAAL,CAAkBC,IAAlB,CAAuBV,OAAvB;;AACA,cAAKK,QAAL,CAAc;AACVM,UAAAA,QAAQ,EAAE,MAAKF,YADL;AAEVG,UAAAA,OAAO,EAAE,MAAKT,KAAL,CAAWS,OAAX,CAAmBC,MAAnB,CAA0Bf,MAA1B,CAFC;AAGVgB,UAAAA,aAAa,EAAEhB;AAHL,SAAd;;AAKA,cAAKiB,SAAL,CAAe;AACXC,UAAAA,OAAO,EAAE,MAAKC,cADH;AAEXC,UAAAA,aAAa,EAAE,MAAKC,mBAFT;AAGXrB,UAAAA,MAAM,EAANA;AAHW,SAAf;AAKH,OAtBD;AAuBAA,MAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqB,UAACC,OAAD,EAAa;AAC9BC,QAAAA,OAAO,CAACC,GAAR,CAAY,mEAAZ,EAAiFF,OAAjF;;AACA,cAAKS,YAAL,CAAkBC,IAAlB,CAAuBV,OAAvB;;AACA,cAAKK,QAAL,CAAc;AACVM,UAAAA,QAAQ,EAAE,MAAKF;AADL,SAAd;AAGH,OAND;AAOAX,MAAAA,MAAM,CAACC,EAAP,CAAU,MAAV,EAAkB,UAACC,OAAD,EAAa;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ,EAA2DF,OAA3D,EAD2B,CAE3B;;AACA,YAAIoB,OAAO,GAAG;AACVb,UAAAA,EAAE,EAAEP,OAAO,CAACM,IAAR,CAAae,cAAb,CAA4B9B,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CADM;AAEVM,UAAAA,QAAQ,EAAEG,OAAO,CAACM,IAAR,CAAaU;AAFb,SAAd;;AAIA,cAAKM,gBAAL,CAAsBF,OAAtB,EAA+B,IAA/B;AACH,OARD;AASAtB,MAAAA,MAAM,CAACC,EAAP,CAAU,kBAAV,EAA8B,UAACC,OAAD,EAAa;AACvCC,QAAAA,OAAO,CAACC,GAAR,CAAY,yDAAZ,EAAuEF,OAAvE;;AACA,cAAKK,QAAL,CAAc;AAACG,UAAAA,WAAW,EAAER,OAAO,CAACM,IAAR,CAAaE;AAA3B,SAAd;;AACA,cAAKC,YAAL,CAAkBC,IAAlB,CAAuBV,OAAvB,EAHuC,CAIvC;AACA;AACA;;AACH,OAPD;AAQH,KArEkB;;AAAA,UAsEnBsB,gBAtEmB,GAsEA,UAACF,OAAD,EAA8B;AAAA,UAApBG,SAAoB,uEAAV,KAAU;AAC7C,UAAIF,cAAc,GAAI,MAAKlB,KAAL,CAAWC,SAAX,GAAuB,GAAvB,GAA6BgB,OAAO,CAACb,EAA3D;AACA,UAAIgB,SAAJ,EACIF,cAAc,GAAGhC,aAAa,CAACgC,cAAD,CAA9B;AACJ,UAAMvB,MAAM,GAAGZ,UAAU,iDAA0CmC,cAA1C,EAAzB;AACAvB,MAAAA,MAAM,CAACC,EAAP,CAAU,aAAV,EAAyB,UAACC,OAAD,EAAa;AAClCC,QAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ,EAA6DF,OAA7D;;AACA,cAAKe,SAAL,CAAe;AACXC,UAAAA,OAAO,EAAEI,OAAO,CAACvB,QADN;AAEXqB,UAAAA,aAAa,EAAEG,cAFJ;AAGXvB,UAAAA,MAAM,EAANA;AAHW,SAAf;;AAKA,YAAI,CAAC,MAAK0B,eAAL,CAAqBH,cAArB,CAAL,EACI,MAAKG,eAAL,CAAqBH,cAArB,IAAuC,EAAvC;;AACJ,cAAKG,eAAL,CAAqBH,cAArB,EAAqCX,IAArC,CAA0CV,OAA1C,EATkC,CAUlC;AACA;AACA;AACA;;AACH,OAdD;AAeAF,MAAAA,MAAM,CAACC,EAAP,CAAU,gBAAV,EAA4B,UAACC,OAAD,EAAa;AACrCC,QAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ,EAAqEF,OAArE;AACA,YAAI,CAAC,MAAKwB,eAAL,CAAqBH,cAArB,CAAL,EACI,MAAKG,eAAL,CAAqBH,cAArB,IAAuC,EAAvC;;AACJ,cAAKG,eAAL,CAAqBH,cAArB,EAAqCX,IAArC,CAA0CV,OAA1C,EAJqC,CAKrC;AACA;AACA;;AACH,OARD,EApB6C,CA6B7C;AACA;AACA;AACA;AACA;AACH,KAxGkB;;AAAA,UAyGnByB,YAzGmB,GAyGL,UAACzB,OAAD,EAAa;AACvB,YAAKG,KAAL,CAAWW,aAAX,CAAyBY,IAAzB,CAA8B,SAA9B,EAAyC1B,OAAzC;AACH,KA3GkB;;AAAA,UA4GnBe,SA5GmB,GA4GP,UAACY,GAAD,EAAS;AAAA;AAAA;AAAA;;AAAA;AACjB,6BAAqB,MAAKxB,KAAL,CAAWwB,GAAhC,8HAAqC;AAAA,cAA5BC,QAA4B;AACjC,cAAIA,QAAQ,CAACV,aAAT,KAA2BS,GAAG,CAACT,aAAnC,EACI;AACP;AAJgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKjB,YAAKb,QAAL,CAAc;AAACsB,QAAAA,GAAG,EAAE,MAAKxB,KAAL,CAAWwB,GAAX,CAAed,MAAf,CAAsBc,GAAtB;AAAN,OAAd;AACH,KAlHkB;;AAEf,UAAKV,cAAL,GAAsB,MAAtB;AACA,UAAKE,mBAAL,GAA2B,MAA3B;AACA,UAAKV,YAAL,GAAoB,EAApB;AACA,UAAKe,eAAL,GAAuB,EAAvB;AACA,UAAKrB,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,IADF;AAETQ,MAAAA,OAAO,EAAE,EAFA;AAGTE,MAAAA,aAAa,EAAE,IAHN;AAITa,MAAAA,GAAG,EAAE,EAJI;AAKTnB,MAAAA,WAAW,EAAE,EALJ;AAMTG,MAAAA,QAAQ,EAAE;AAND,KAAb,CANe,CAcf;AACA;AACA;AACA;;AAjBe;AAkBlB;;;;6BAkGQ;AAAA;;AACL,UAAMgB,GAAG,GAAG,KAAKxB,KAAL,CAAWwB,GAAX,CAAeE,GAAf,CAAmB,UAACC,IAAD,EAAOC,CAAP,EAAa;AACxC,eAAO,oBAAC,IAAD;AAAM,UAAA,EAAE,EAAE,GAAV;AAAe,UAAA,SAAS,EAAC,mBAAzB;AAA6C,UAAA,GAAG,EAAEA,CAAlD;AACM,UAAA,OAAO,EAAE,mBAAI;AACT,gBAAID,IAAI,CAACZ,aAAL,KAAuB,MAAI,CAACC,mBAAhC,EACI,MAAI,CAACd,QAAL,CAAc;AACVM,cAAAA,QAAQ,EAAE,MAAI,CAACF;AADL,aAAd,EADJ,KAIK,MAAI,CAACJ,QAAL,CAAc;AACfM,cAAAA,QAAQ,EAAE,MAAI,CAACa,eAAL,CAAqBM,IAAI,CAACZ,aAA1B;AADK,aAAd;;AAGL,YAAA,MAAI,CAACb,QAAL,CAAc;AAACS,cAAAA,aAAa,EAAEgB,IAAI,CAAChC;AAArB,aAAd;AACH,WAVP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAUUgC,IAAI,CAACd,OAVf,CAAP;AAWH,OAZW,CAAZ;AAaA,UAAMR,WAAW,GAAG,KAAKL,KAAL,CAAWK,WAAX,CAAuBqB,GAAvB,CAA2B,UAACG,IAAD,EAAOD,CAAP,EAAa;AACxDC,QAAAA,IAAI,CAACnC,QAAL,IAAiBmC,IAAI,CAACzB,EAAL,KAAY,MAAI,CAACJ,KAAL,CAAWC,SAAvB,IAAoC4B,IAAI,CAACnC,QAAL,CAAcoC,OAAd,CAAsB,MAAtB,MAAkC,CAAC,CAAvE,GAA0E,OAA1E,GAAmF,EAApG;AAEA,eAAO,oBAAC,UAAD;AAAY,UAAA,GAAG,EAAEF,CAAjB;AAAoB,UAAA,IAAI,EAAEC,IAA1B;AAAgC,UAAA,SAAS,EAAE,MAAI,CAAC7B,KAAL,CAAWC,SAAtD;AAAiE,UAAA,QAAQ,EAAE,MAAI,CAACa,cAAhF;AACY,UAAA,gBAAgB,EAAE,MAAI,CAACK,gBADnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEH,OALmB,CAApB;AAMA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,+CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,SAAS,EAAC,cAAb;AAA4B,QAAA,IAAI,EAAC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ,EAII;AAAQ,QAAA,SAAS,EAAC,gBAAlB;AAAmC,QAAA,IAAI,EAAC,QAAxC;AAAiD,uBAAY,UAA7D;AAAwE,uBAAY,qBAApF;AACQ,yBAAc,oBADtB;AAC2C,yBAAc,OADzD;AACiE,sBAAW,mBAD5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAM,QAAA,SAAS,EAAC,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CAJJ,EAQI;AAAK,QAAA,SAAS,EAAC,0BAAf;AAA0C,QAAA,EAAE,EAAC,oBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKK,GADL,CADJ,CARJ,CADJ,EAeI,oBAAC,KAAD;AAAO,QAAA,aAAa,EAAE,KAAK/B,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAfJ,EAgBI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,KAAK,EAAE;AAACsC,UAAAA,UAAU,EAAE;AAAb,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0IAAyD,KAAKjB,cAA9D,SADJ,EAEKT,WAFL,CAhBJ,EAoBI,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWQ,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QApBJ,EAqBI,oBAAC,SAAD;AAAW,QAAA,YAAY,EAAE,KAAKc,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArBJ,CADJ;AAyBH;;;;EAnKclD,KAAK,CAAC4D,S;;AAsKzB,eAAehD,WAAW,CAACO,IAAD,CAA1B","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport {BrowserRouter as Router, Route, Switch, Redirect, Link} from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\nimport { withCookies, Cookies } from 'react-cookie';\n\nfunction reverseString(s){\n    return s.split(\"\").reverse().join(\"\");\n}\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this._ROOM_NAV_NAME = 'ROOM';\n        this._ROOM_MESSAGE_STORE = 'ROOM';\n        this.roomMessages = [];\n        this.privateMessages = {};\n        this.state = {\n            sessionId: null,\n            sockets: [],\n            currentSocket: null,\n            nav: [],\n            usersOnline: [],\n            messages: [],\n        };\n        // this.session = {\n        //     id: null,\n        //     nickname: null\n        // }\n    }\n\n    connectToRoom = (nickname) => {\n        const socket = openSocket('http://localhost:5000?nickname=' + nickname);\n        socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n            // this.session.id = message.data.id;\n            // this.session.nickname = message.data.nickname;\n            // const { cookies } = this.props;\n            // console.log(cookies)\n            // if (!cookies.get('id'))\n            //     cookies.set('id', message.data.id, { path: '/' });\n            if (!this.state.sessionId)\n                this.setState({sessionId: message.data.id});\n            this.setState({usersOnline: message.data.usersOnline});\n            this.roomMessages.push(message);\n            this.setState({\n                messages: this.roomMessages,\n                sockets: this.state.sockets.concat(socket),\n                currentSocket: socket,\n            });\n            this.updateNav({\n                navName: this._ROOM_NAV_NAME,\n                messagesStore: this._ROOM_MESSAGE_STORE,\n                socket,\n            });\n        });\n        socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n            this.roomMessages.push(message);\n            this.setState({\n                messages: this.roomMessages,\n            });\n        });\n        socket.on('join', (message) => {\n            console.log('Websocket: broadcast from \\'join\\' channel:', message);\n            // this.updateUsersOnline(message.data.usersOnline);\n            let partner = {\n                id: message.data.conversationId.split('-')[0],\n                nickname: message.data.navName\n            };\n            this.connectToPrivate(partner, true)\n        });\n        socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'userDisconnected\\' channel:', message);\n            this.setState({usersOnline: message.data.usersOnline});\n            this.roomMessages.push(message);\n            // this.setState({\n            //     messages: this.roomMessages,\n            // });\n        });\n    };\n    connectToPrivate = (partner, isReverse=false) => {\n        let conversationId = (this.state.sessionId + '-' + partner.id);\n        if (isReverse)\n            conversationId = reverseString(conversationId);\n        const socket = openSocket(`http://localhost:5000/?conversationId=${conversationId}`);\n        socket.on('established', (message) => {\n            console.log('Websocket: broadcast \\'established\\' channel:', message);\n            this.updateNav({\n                navName: partner.nickname,\n                messagesStore: conversationId,\n                socket,\n            });\n            if (!this.privateMessages[conversationId])\n                this.privateMessages[conversationId] = [];\n            this.privateMessages[conversationId].push(message);\n            // this.setState({\n            //     messages: this.privateMessages[conversationId],\n            //     currentSocket: socket\n            // });\n        });\n        socket.on('privateMessage', (message) => {\n            console.log('Websocket: broadcast from \\'privateMessage\\' channel:', message);\n            if (!this.privateMessages[conversationId])\n                this.privateMessages[conversationId] = [];\n            this.privateMessages[conversationId].push(message);\n            // this.setState({\n            //     messages: this.privateMessages[conversationId],\n            // });\n        });\n        // this.socket.on('demolished', (message) => {\n        //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n        //     this.updateUsersOnline(message.data.usersOnline);\n        //     this.updateMessages(message);\n        // });\n    };\n    sendToServer =(message) => {\n        this.state.currentSocket.emit('message', message);\n    };\n    updateNav = (nav) => {\n        for (let navSaved of this.state.nav) {\n            if (navSaved.messagesStore === nav.messagesStore)\n                return;\n        }\n        this.setState({nav: this.state.nav.concat(nav)})\n    };\n\n    render() {\n        const nav = this.state.nav.map((item, i) => {\n            return <Link to={'#'} className=\"nav-item nav-link\" key={i}\n                         onClick={()=>{\n                             if (item.messagesStore === this._ROOM_MESSAGE_STORE)\n                                 this.setState({\n                                     messages: this.roomMessages\n                                 });\n                             else this.setState({\n                                 messages: this.privateMessages[item.messagesStore]\n                             });\n                             this.setState({currentSocket: item.socket})\n                         }}>{item.navName}</Link>\n        });\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            user.nickname += user.id === this.state.sessionId && user.nickname.indexOf('(Вы)') === -1? ' (Вы)': '';\n\n            return <UserOnline key={i} user={user} sessionId={this.state.sessionId} roomName={this._ROOM_NAV_NAME}\n                               connectToPrivate={this.connectToPrivate} />\n        });\n        return(\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <a className=\"navbar-brand\" href=\"#\">\n                        <h3>Chat</h3>\n                    </a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\"\n                            aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                        <div className=\"navbar-nav\">\n                            {nav}\n                        </div>\n                    </div>\n                </nav>\n                <Login connectToRoom={this.connectToRoom}/>\n                <div className='usersOnlineStyle'>\n                    <p style={{fontWeight: 'bold'}}>Пользователи в комнате \"{this._ROOM_NAV_NAME}\": </p>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages}/>\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default withCookies(Chat);"]},"metadata":{},"sourceType":"module"}