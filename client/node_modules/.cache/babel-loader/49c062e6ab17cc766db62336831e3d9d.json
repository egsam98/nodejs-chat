{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Room.js\";\nimport React from 'react';\nimport Chat from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from \"./Login\";\nimport { Link } from \"react-router-dom\";\nimport UserOnline from \"./UserOnline\";\nimport openSocket from 'socket.io-client';\n\nvar Room =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Room, _React$Component);\n\n  function Room(props) {\n    var _this;\n\n    _classCallCheck(this, Room);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Room).call(this, props));\n\n    _this.createRoom = function (nickname) {\n      _this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n\n      _this.socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n\n        _this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateMessages(message);\n      });\n\n      _this.socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n        _this.updateMessages(message);\n      });\n\n      _this.socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n\n        _this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateMessages(message);\n      });\n\n      _this.setState({\n        nav: _this.state.nav.concat({\n          navName: 'ROOM',\n          route: '/'\n        })\n      });\n    };\n\n    _this.createPrivate = function (partner) {\n      fetch('/session/user').then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        var conversationId = data.user.id + '-' + partner.id;\n        console.log(conversationId);\n        _this.socket = openSocket(\"http://localhost:5000/private?conversationId=\".concat(conversationId));\n\n        _this.socket.on('established', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n          _this.setState({\n            nav: _this.state.nav.concat({\n              navName: partner.nickname,\n              route: _this.pathToPrivateChat + partner.nickname\n            })\n          });\n\n          _this.updateMessages(message);\n        });\n\n        _this.socket.on('message', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n\n          _this.updateMessages(message);\n        }); // this.socket.on('demolished', (message) => {\n        //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n        //     this.updateUsersOnline(message.data.usersOnline);\n        //     this.updateMessages(message);\n        // });\n\n      });\n    };\n\n    _this.sendToServer = function (message) {\n      _this.socket.emit('message', message);\n    };\n\n    _this.updateMessages = function (message) {\n      _this.setState({\n        messages: _this.state.messages.concat(message)\n      });\n    };\n\n    _this.updateUsersOnline = function (users) {\n      _this.setState({\n        usersOnline: users\n      });\n    };\n\n    _this.socket = null;\n    _this.state = {\n      usersOnline: [],\n      messages: []\n    };\n    _this.usersOnlineStyle = {\n      float: 'right',\n      width: '400px',\n      height: '600px',\n      border: 'black 2px solid',\n      padding: '20px'\n    };\n    _this.nav = _this.state.nav.map(function (item, i) {\n      return React.createElement(Link, {\n        to: item.route,\n        className: \"nav-item nav-link\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, item.navName);\n    });\n    _this.usersOnline = _this.state.usersOnline.map(function (user, i) {\n      return React.createElement(UserOnline, {\n        key: i,\n        user: user,\n        path: _this.pathToPrivateChat,\n        createPrivate: _this.createPrivate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      });\n    });\n    return _this;\n  }\n\n  _createClass(Room, [{\n    key: \"render\",\n    value: function render() {\n      console.log(this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Login, {\n        createRoom: this.createRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: this.usersOnlineStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, this.usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Room;\n}(React.Component);\n\nexport default Room;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Room.js"],"names":["React","Chat","Messages","ChatInput","Login","Link","UserOnline","openSocket","Room","props","createRoom","nickname","socket","on","message","console","log","updateUsersOnline","data","usersOnline","updateMessages","setState","nav","state","concat","navName","route","createPrivate","partner","fetch","then","res","json","conversationId","user","id","pathToPrivateChat","sendToServer","emit","messages","users","usersOnlineStyle","float","width","height","border","padding","map","item","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Chat from \"./Chat\";\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from \"./Login\";\nimport {Link} from \"react-router-dom\";\nimport UserOnline from \"./UserOnline\";\nimport openSocket from 'socket.io-client';\n\nclass Room extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.socket = null;\n        this.state = {\n            usersOnline: [],\n            messages: [],\n        };\n        this.usersOnlineStyle = {\n            float: 'right',\n            width: '400px',\n            height: '600px',\n            border: 'black 2px solid',\n            padding: '20px'\n        };\n        this.nav = this.state.nav.map((item, i) => {\n            return <Link to={item.route} className=\"nav-item nav-link\" key={i}>{item.navName}</Link>\n        });\n        this.usersOnline = this.state.usersOnline.map((user, i) => {\n            return <UserOnline key={i} user={user} path={this.pathToPrivateChat} createPrivate={this.createPrivate} />\n        });\n    }\n\n    createRoom = (nickname) => {\n        this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n        this.socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n            this.updateUsersOnline(message.data.usersOnline);\n            this.updateMessages(message);\n        });\n        this.socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n            this.updateMessages(message);\n        });\n        this.socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n            this.updateUsersOnline(message.data.usersOnline);\n            this.updateMessages(message);\n        });\n\n        this.setState({nav: this.state.nav.concat({\n                navName:'ROOM',\n                route: '/'\n            })})\n    };\n\n    createPrivate = (partner) => {\n        fetch('/session/user').then(res => res.json()).then(data => {\n            let conversationId = (data.user.id + '-' + partner.id);\n            console.log(conversationId);\n            this.socket = openSocket(`http://localhost:5000/private?conversationId=${conversationId}`);\n            this.socket.on('established', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message);\n                // this.updateUsersOnline(message.data.usersOnline);\n                this.setState({nav: this.state.nav.concat({\n                        navName: partner.nickname,\n                        route: this.pathToPrivateChat+partner.nickname\n                    })});\n                this.updateMessages(message);\n            });\n            this.socket.on('message', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n                this.updateMessages(message);\n            });\n            // this.socket.on('demolished', (message) => {\n            //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n            //     this.updateUsersOnline(message.data.usersOnline);\n            //     this.updateMessages(message);\n            // });\n        });\n    };\n\n    sendToServer = (message) => {\n        this.socket.emit('message', message);\n    };\n\n    updateMessages = (message) => {\n        this.setState({messages: this.state.messages.concat(message)});\n    };\n\n    updateUsersOnline = (users) => {\n        this.setState({usersOnline: users});\n    };\n\n    render() {\n        console.log(this.props);\n        return (\n            <div>\n                <Login createRoom={this.createRoom} />\n                <div style={this.usersOnlineStyle}>\n                    {this.usersOnline}\n                </div>\n                <Messages messages={this.state.messages} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        )\n    }\n}\n\nexport default Room;"]},"metadata":{},"sourceType":"module"}