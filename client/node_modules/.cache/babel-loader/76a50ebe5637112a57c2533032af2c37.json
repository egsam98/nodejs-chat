{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport openSocket from 'socket.io-client';\nimport UserOnline from \"./UserOnline\";\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport Private from './Private/Private'; // import Cookies from \"universal-cookie\";\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _this.createRoom = function (nickname) {\n      _this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n\n      _this.socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n\n        _this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateMessages(message);\n      });\n\n      _this.socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n        _this.updateMessages(message);\n      });\n\n      _this.socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n\n        _this.updateUsersOnline(message.data.usersOnline);\n\n        _this.updateMessages(message);\n      });\n    };\n\n    _this.createPrivate = function (personId) {\n      fetch('/session/user').then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        _this.conversationId = data.user.id + '-' + personId;\n        console.log(_this.conversationId);\n        _this.socket = openSocket(\"http://localhost:5000/private?conversationId=\".concat(_this.conversationId));\n\n        _this.socket.on('established', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n          _this.updateMessages(message);\n        });\n\n        _this.socket.on('message', function (message) {\n          console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n\n          _this.updateMessages(message);\n        }); // this.socket.on('demolished', (message) => {\n        //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n        //     this.updateUsersOnline(message.data.usersOnline);\n        //     this.updateMessages(message);\n        // });\n\n      });\n    };\n\n    _this.sendToServer = function (message) {\n      _this.socket.emit('message', message);\n    };\n\n    _this.updateMessages = function (message) {\n      _this.setState({\n        messages: _this.state.messages.concat(message)\n      });\n    };\n\n    _this.updateUsersOnline = function (users) {\n      _this.setState({\n        usersOnline: users\n      });\n    };\n\n    _this.pathToPrivateChat = '/private/';\n    _this.conversationId = null;\n    _this.socket = null;\n    _this.state = {\n      usersOnline: [],\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var usersOnlineStyle = {\n        float: 'right',\n        width: '400px',\n        height: '600px',\n        border: 'black 2px solid',\n        padding: '20px'\n      };\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          path: \"\".concat(_this2.pathToPrivateChat).concat(_this2.conversationId),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"\".concat(this.pathToPrivateChat, \":id\"),\n        render: function render(props) {\n          return React.createElement(Private, Object.assign({}, props, {\n            createPrivate: _this2.createPrivate,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: '/',\n        render: function render() {\n          return React.createElement(Login, {\n            createRoom: _this2.createRoom,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        style: usersOnlineStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","openSocket","UserOnline","BrowserRouter","Router","Route","Switch","Redirect","Link","Private","Chat","props","createRoom","nickname","socket","on","message","console","log","updateUsersOnline","data","usersOnline","updateMessages","createPrivate","personId","fetch","then","res","json","conversationId","user","id","sendToServer","emit","setState","messages","state","concat","users","pathToPrivateChat","usersOnlineStyle","float","width","height","border","padding","map","i","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport openSocket from 'socket.io-client';\nimport UserOnline from \"./UserOnline\";\nimport {BrowserRouter as Router, Route, Switch, Redirect, Link} from \"react-router-dom\";\nimport Private from './Private/Private';\n// import Cookies from \"universal-cookie\";\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.pathToPrivateChat = '/private/';\n        this.conversationId = null;\n        this.socket = null;\n        this.state = {\n            usersOnline: [],\n            messages: []\n        };\n    }\n\n    createRoom = (nickname) => {\n        this.socket = openSocket('http://localhost:5000/room?nickname=' + nickname);\n        this.socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'connected\\' channel:', message);\n            this.updateUsersOnline(message.data.usersOnline);\n            this.updateMessages(message);\n        });\n        this.socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n            this.updateMessages(message);\n        });\n        this.socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'userDisconnected\\' channel:', message);\n            this.updateUsersOnline(message.data.usersOnline);\n            this.updateMessages(message);\n        });\n    };\n\n    createPrivate = (personId) => {\n        fetch('/session/user').then(res => res.json()).then(data => {\n            this.conversationId = data.user.id + '-' + personId;\n            console.log(this.conversationId);\n            this.socket = openSocket(`http://localhost:5000/private?conversationId=${this.conversationId}`);\n            this.socket.on('established', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'established\\' channel:', message);\n                // this.updateUsersOnline(message.data.usersOnline);\n                this.updateMessages(message);\n            });\n            this.socket.on('message', (message) => {\n                console.log('Websocket: broadcast from \\'private\\' namespace \\'message\\' channel:', message);\n                this.updateMessages(message);\n            });\n            // this.socket.on('demolished', (message) => {\n            //     console.log('Websocket: broadcast from \\'private\\' namespace \\'userDisconnected\\' channel:', message);\n            //     this.updateUsersOnline(message.data.usersOnline);\n            //     this.updateMessages(message);\n            // });\n        });\n    };\n\n    sendToServer = (message) => {\n        this.socket.emit('message', message);\n    };\n\n    updateMessages = (message) => {\n        this.setState({messages: this.state.messages.concat(message)});\n    };\n\n    updateUsersOnline = (users) => {\n        this.setState({usersOnline: users});\n    };\n\n    render() {\n        const usersOnlineStyle = {\n            float: 'right',\n            width: '400px',\n            height: '600px',\n            border: 'black 2px solid',\n            padding: '20px'\n        };\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            return <UserOnline key={i} user={user} path={`${this.pathToPrivateChat}${this.conversationId}`} />\n        });\n        return(\n            <div>\n                <Router>\n                    <Switch>\n                        <Route path={`${this.pathToPrivateChat}:id`}\n                               render={(props) => <Private {...props} createPrivate={this.createPrivate}/>}/>\n                        {/*<Redirect from={'/:path'} to={'/'} />*/}\n                        <Route path={'/'} render={() => <Login createRoom={this.createRoom} />} />\n                    </Switch>\n                </Router>\n                <div style={usersOnlineStyle}>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}