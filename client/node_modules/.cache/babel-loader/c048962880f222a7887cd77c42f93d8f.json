{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UsersOnline from './UsersOnline';\nimport Message from '../models/message';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n    _this.connection = null;\n\n    _this.createWS = function (nickname) {\n      _this.connection = new WebSocket('ws://127.0.0.1:5000/?nickname=' + nickname);\n\n      _this.connection.onopen = function () {\n        console.log('WEBSOCKET RUN');\n      };\n\n      _this.connection.onmessage = function (message) {\n        var messageJSON = JSON.parse(message.data);\n\n        switch (messageJSON.channel) {\n          case 'usersOnline':\n            _this.updateUsersOnline(messageJSON.data);\n\n            _this.updateMessages(new Message(messageJSON.text, messageJSON.type));\n\n            break;\n\n          case 'messages':\n            _this.updateMessages(new Message(messageJSON.text, messageJSON.type));\n\n            break;\n        }\n      };\n    };\n\n    _this.sendToServer = function (message) {\n      _this.connection.send(message);\n    };\n\n    _this.updateMessages = function (message) {\n      _this.setState({\n        messages: _this.state.messages.concat(message)\n      });\n    };\n\n    _this.updateUsersOnline = function (users) {\n      _this.setState({\n        usersOnline: users\n      });\n    };\n\n    _this.state = {\n      usersOnline: [],\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        style: {\n          height: '80vh'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Login, {\n        createWS: this.createWS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(UsersOnline, {\n        usersOnline: this.state.usersOnline,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UsersOnline","Message","Chat","props","connection","createWS","nickname","WebSocket","onopen","console","log","onmessage","message","messageJSON","JSON","parse","data","channel","updateUsersOnline","updateMessages","text","type","sendToServer","send","setState","messages","state","concat","users","usersOnline","height","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;;IAEMC,I;;;;;AAEF,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8EAAMA,KAAN;AADe,UAQnBC,UARmB,GAQN,IARM;;AAAA,UAUnBC,QAVmB,GAUR,UAACC,QAAD,EAAc;AACrB,YAAKF,UAAL,GAAkB,IAAIG,SAAJ,CAAc,mCAAmCD,QAAjD,CAAlB;;AACA,YAAKF,UAAL,CAAgBI,MAAhB,GAAyB,YAAM;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,OAFD;;AAGA,YAAKN,UAAL,CAAgBO,SAAhB,GAA4B,UAACC,OAAD,EAAa;AACrC,YAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACI,IAAnB,CAAlB;;AACA,gBAAQH,WAAW,CAACI,OAApB;AACI,eAAK,aAAL;AACI,kBAAKC,iBAAL,CAAuBL,WAAW,CAACG,IAAnC;;AACA,kBAAKG,cAAL,CAAoB,IAAIlB,OAAJ,CAAYY,WAAW,CAACO,IAAxB,EAChBP,WAAW,CAACQ,IADI,CAApB;;AAEA;;AACJ,eAAK,UAAL;AACI,kBAAKF,cAAL,CAAoB,IAAIlB,OAAJ,CAAYY,WAAW,CAACO,IAAxB,EAChBP,WAAW,CAACQ,IADI,CAApB;;AAEA;AATR;AAWH,OAbD;AAcH,KA7BkB;;AAAA,UA+BnBC,YA/BmB,GA+BJ,UAACV,OAAD,EAAa;AACxB,YAAKR,UAAL,CAAgBmB,IAAhB,CAAqBX,OAArB;AACH,KAjCkB;;AAAA,UAmCnBO,cAnCmB,GAmCF,UAACP,OAAD,EAAa;AAC1B,YAAKY,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAE,MAAKC,KAAL,CAAWD,QAAX,CAAoBE,MAApB,CAA2Bf,OAA3B;AAAX,OAAd;AACH,KArCkB;;AAAA,UAuCnBM,iBAvCmB,GAuCC,UAACU,KAAD,EAAW;AAC3B,YAAKJ,QAAL,CAAc;AAACK,QAAAA,WAAW,EAAED;AAAd,OAAd;AACH,KAzCkB;;AAEf,UAAKF,KAAL,GAAa;AACTG,MAAAA,WAAW,EAAE,EADJ;AAETJ,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAFe;AAMlB;;;;6BAqCQ;AACL,aACI;AAAK,QAAA,KAAK,EAAE;AAACK,UAAAA,MAAM,EAAE;AAAT,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,QAAQ,EAAE,KAAKzB,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,WAAD;AAAa,QAAA,WAAW,EAAE,KAAKqB,KAAL,CAAWG,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWD,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII,oBAAC,SAAD;AAAW,QAAA,YAAY,EAAE,KAAKH,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CADJ;AAQH;;;;EAtDc1B,KAAK,CAACmC,S;;AAyDzB,eAAe7B,IAAf","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UsersOnline from './UsersOnline';\nimport Message from '../models/message';\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            usersOnline: [],\n            messages: []\n        };\n    }\n\n    connection = null;\n\n    createWS = (nickname) => {\n        this.connection = new WebSocket('ws://127.0.0.1:5000/?nickname=' + nickname);\n        this.connection.onopen = () => {\n            console.log('WEBSOCKET RUN');\n        };\n        this.connection.onmessage = (message) => {\n            let messageJSON = JSON.parse(message.data);\n            switch (messageJSON.channel) {\n                case 'usersOnline':\n                    this.updateUsersOnline(messageJSON.data);\n                    this.updateMessages(new Message(messageJSON.text,\n                        messageJSON.type));\n                    break;\n                case 'messages':\n                    this.updateMessages(new Message(messageJSON.text,\n                        messageJSON.type));\n                    break;\n            }\n        };\n    };\n\n    sendToServer = (message) => {\n        this.connection.send(message);\n    };\n\n    updateMessages = (message) => {\n        this.setState({messages: this.state.messages.concat(message)});\n    };\n\n    updateUsersOnline = (users) => {\n        this.setState({usersOnline: users});\n    };\n\n    render() {\n        return (\n            <div style={{height: '80vh'}}>\n                <Login createWS={this.createWS} />\n                <UsersOnline usersOnline={this.state.usersOnline} />\n                <Messages messages={this.state.messages} />\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}