{"ast":null,"code":"import _classCallCheck from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/egor/WebstormProjects/NodeReact/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js\";\nimport React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport { Link } from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\nimport Cookies from 'universal-cookie';\n\nfunction reverseString(s) {\n  return s.split(\"\").reverse().join(\"\");\n}\n\nvar Chat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _this.connectToRoom = function (nickname) {\n      var socket = openSocket(\"http://127.0.0.1:5000?nickname=\".concat(nickname));\n      var cookies = new Cookies();\n      socket.on('cookiesReceived', function (message) {\n        cookies.set('id', message.data.id);\n        cookies.set('nickname', message.data.nickname);\n        cookies.set('avatar', message.data.avatar);\n      });\n      socket.on('userConnected', function (message) {\n        console.log('Websocket: broadcast from \\'connected\\' channel:', message);\n        if (!_this.state.sessionId) _this.setState({\n          sessionId: cookies.get('id')\n        });\n\n        _this.setState({\n          usersOnline: message.data.usersOnline\n        });\n\n        _this.roomMessages.push(message);\n\n        if (window.location.pathname === '/') _this.setState({\n          messages: _this.roomMessages,\n          sockets: _this.state.sockets.concat(socket),\n          currentSocket: socket\n        });\n\n        _this.updateNav({\n          navName: _this._ROOM_NAV_NAME,\n          messagesStore: _this._ROOM_MESSAGE_STORE,\n          socket: socket\n        });\n      });\n      socket.on('message', function (message) {\n        console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n\n        _this.roomMessages.push(message);\n\n        if (window.location.pathname === '/') _this.setState({\n          messages: _this.roomMessages\n        });\n      });\n      socket.on('join', function (message) {\n        console.log('Websocket: broadcast from \\'join\\' channel:', message); // this.updateUsersOnline(message.data.usersOnline);\n\n        var partner = {\n          id: message.data.conversationId.split('-')[0],\n          nickname: message.data.navName\n        };\n\n        _this.connectToPrivate(partner, true);\n      });\n      socket.on('userDisconnected', function (message) {\n        console.log('Websocket: broadcast from \\'userDisconnected\\' channel:', message);\n\n        _this.setState({\n          usersOnline: message.data.usersOnline\n        });\n\n        _this.roomMessages.push(message);\n\n        if (window.location.pathname === '/') _this.setState({\n          messages: _this.roomMessages\n        });\n      });\n    };\n\n    _this.connectToPrivate = function (partner) {\n      var isReverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var conversationId = _this.state.sessionId + '-' + partner.id;\n      if (isReverse) conversationId = reverseString(conversationId);\n      var cookies = new Cookies();\n      var socket = openSocket(\"http://127.0.0.1:5000?conversationId=\".concat(conversationId, \"&id=\").concat(cookies.get('id'), \"\\n        &nickname=\").concat(cookies.get('nickname'), \"&avatar=\").concat(cookies.get('avatar')));\n      socket.on('established', function (message) {\n        console.log('Websocket: broadcast \\'established\\' channel:', message);\n\n        _this.updateNav({\n          navName: partner.nickname,\n          messagesStore: conversationId,\n          socket: socket\n        });\n\n        if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = [];\n\n        _this.privateMessages[conversationId].push(message);\n\n        if (window.location.pathname === \"/\".concat(conversationId)) _this.setState({\n          messages: _this.privateMessages[conversationId],\n          currentSocket: socket\n        });\n      });\n      socket.on('privateMessage', function (message) {\n        console.log('Websocket: broadcast from \\'privateMessage\\' channel:', message);\n        if (!_this.privateMessages[conversationId]) _this.privateMessages[conversationId] = [];\n\n        _this.privateMessages[conversationId].push(message);\n\n        if (window.location.pathname === \"/\".concat(conversationId)) _this.setState({\n          messages: _this.privateMessages[conversationId]\n        });\n      });\n      socket.on('demolished', function (message) {\n        console.log('Websocket: broadcast from \\'demolished\\' channel:', message);\n\n        _this.privateMessages[conversationId].push(message);\n\n        if (window.location.pathname === \"/\".concat(conversationId)) _this.setState({\n          messages: _this.privateMessages[conversationId]\n        });\n      });\n    };\n\n    _this.sendToServer = function (text) {\n      var cookies = new Cookies();\n      var message = {\n        data: {\n          nickname: cookies.get('nickname'),\n          avatar: cookies.get('avatar')\n        },\n        text: text\n      };\n      console.log('BEFORE SEND', message);\n\n      _this.state.currentSocket.emit('message', message);\n    };\n\n    _this.updateNav = function (nav) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.state.nav[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var navSaved = _step.value;\n          if (navSaved.messagesStore === nav.messagesStore) return;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.setState({\n        nav: _this.state.nav.concat(nav)\n      });\n    };\n\n    _this.handleClickNav = function (itemId, item) {\n      if (item.messagesStore === _this._ROOM_MESSAGE_STORE) _this.setState({\n        messages: _this.roomMessages\n      });else _this.setState({\n        messages: _this.privateMessages[item.messagesStore]\n      });\n\n      _this.setState({\n        currentSocket: item.socket\n      }); // document.querySelector(`#${itemId}`).style.border = 'black 1px solid';\n\n    };\n\n    _this._ROOM_NAV_NAME = 'ROOM';\n    _this._ROOM_MESSAGE_STORE = 'ROOM';\n    _this.roomMessages = [];\n    _this.privateMessages = {};\n    _this.state = {\n      sessionId: null,\n      sockets: [],\n      currentSocket: null,\n      nav: [],\n      usersOnline: [],\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var nav = this.state.nav.map(function (item, i) {\n        return React.createElement(Link, {\n          to: item.navName === _this2._ROOM_NAV_NAME ? '/' : \"/\".concat(item.messagesStore),\n          className: \"nav-item nav-link\",\n          key: i,\n          onClick: function onClick() {\n            return _this2.handleClickNav(item.messagesStore, item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, item.navName);\n      });\n      var usersOnline = this.state.usersOnline.map(function (user, i) {\n        user.nickname += user.id === _this2.state.sessionId && user.nickname.indexOf('(Вы)') === -1 ? ' (Вы)' : '';\n        return React.createElement(UserOnline, {\n          key: i,\n          user: user,\n          sessionId: _this2.state.sessionId,\n          roomName: _this2._ROOM_NAV_NAME,\n          connectToPrivate: _this2.connectToPrivate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-expand-lg navbar-light bg-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"Chat\")), React.createElement(\"button\", {\n        className: \"navbar-toggler\",\n        type: \"button\",\n        \"data-toggle\": \"collapse\",\n        \"data-target\": \"#navbarNavAltMarkup\",\n        \"aria-controls\": \"navbarNavAltMarkup\",\n        \"aria-expanded\": \"false\",\n        \"aria-label\": \"Toggle navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"navbar-toggler-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"collapse navbar-collapse\",\n        id: \"navbarNavAltMarkup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, nav))), React.createElement(Login, {\n        connectToRoom: this.connectToRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"usersOnlineStyle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0438 \\u0432 \\u043A\\u043E\\u043C\\u043D\\u0430\\u0442\\u0435 \\\"\", this._ROOM_NAV_NAME, \"\\\": \"), usersOnline), React.createElement(Messages, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        sendToServer: this.sendToServer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["/home/egor/WebstormProjects/NodeReact/client/src/Chat/Chat.js"],"names":["React","Messages","ChatInput","Login","UserOnline","Link","openSocket","Cookies","reverseString","s","split","reverse","join","Chat","props","connectToRoom","nickname","socket","cookies","on","message","set","data","id","avatar","console","log","state","sessionId","setState","get","usersOnline","roomMessages","push","window","location","pathname","messages","sockets","concat","currentSocket","updateNav","navName","_ROOM_NAV_NAME","messagesStore","_ROOM_MESSAGE_STORE","partner","conversationId","connectToPrivate","isReverse","privateMessages","sendToServer","text","emit","nav","navSaved","handleClickNav","itemId","item","map","i","user","indexOf","fontWeight","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Messages from \"./Messages\";\nimport ChatInput from \"./ChatInput\";\nimport Login from './Login';\nimport UserOnline from \"./UserOnline\";\nimport {Link} from \"react-router-dom\";\nimport openSocket from 'socket.io-client';\nimport Cookies from 'universal-cookie';\n\nfunction reverseString(s){\n    return s.split(\"\").reverse().join(\"\");\n}\n\nclass Chat extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this._ROOM_NAV_NAME = 'ROOM';\n        this._ROOM_MESSAGE_STORE = 'ROOM';\n        this.roomMessages = [];\n        this.privateMessages = {};\n        this.state = {\n            sessionId: null,\n            sockets: [],\n            currentSocket: null,\n            nav: [],\n            usersOnline: [],\n            messages: [],\n        };\n    }\n\n    connectToRoom = (nickname) => {\n        const socket = openSocket(`http://127.0.0.1:5000?nickname=${nickname}`);\n        const cookies = new Cookies();\n        socket.on('cookiesReceived', message => {\n            cookies.set('id', message.data.id);\n            cookies.set('nickname', message.data.nickname);\n            cookies.set('avatar', message.data.avatar);\n        });\n        socket.on('userConnected', (message) => {\n            console.log('Websocket: broadcast from \\'connected\\' channel:', message);\n            if (!this.state.sessionId)\n                this.setState({sessionId: cookies.get('id')});\n            this.setState({usersOnline: message.data.usersOnline});\n            this.roomMessages.push(message);\n            if (window.location.pathname === '/')\n                this.setState({\n                    messages: this.roomMessages,\n                    sockets: this.state.sockets.concat(socket),\n                    currentSocket: socket,\n                });\n            this.updateNav({\n                navName: this._ROOM_NAV_NAME,\n                messagesStore: this._ROOM_MESSAGE_STORE,\n                socket,\n            });\n        });\n        socket.on('message', (message) => {\n            console.log('Websocket: broadcast from \\'room\\' namespace \\'message\\' channel:', message);\n            this.roomMessages.push(message);\n            if (window.location.pathname === '/')\n                this.setState({\n                    messages: this.roomMessages,\n                });\n        });\n        socket.on('join', (message) => {\n            console.log('Websocket: broadcast from \\'join\\' channel:', message);\n            // this.updateUsersOnline(message.data.usersOnline);\n            let partner = {\n                id: message.data.conversationId.split('-')[0],\n                nickname: message.data.navName\n            };\n            this.connectToPrivate(partner, true)\n        });\n        socket.on('userDisconnected', (message) => {\n            console.log('Websocket: broadcast from \\'userDisconnected\\' channel:', message);\n            this.setState({usersOnline: message.data.usersOnline});\n            this.roomMessages.push(message);\n            if (window.location.pathname === '/')\n                this.setState({\n                    messages: this.roomMessages,\n                });\n        });\n    };\n    connectToPrivate = (partner, isReverse=false) => {\n        let conversationId = (this.state.sessionId + '-' + partner.id);\n        if (isReverse)\n            conversationId = reverseString(conversationId);\n        const cookies = new Cookies();\n        const socket = openSocket(`http://127.0.0.1:5000?conversationId=${conversationId}&id=${cookies.get('id')}\n        &nickname=${cookies.get('nickname')}&avatar=${cookies.get('avatar')}`);\n        socket.on('established', (message) => {\n            console.log('Websocket: broadcast \\'established\\' channel:', message);\n            this.updateNav({\n                navName: partner.nickname,\n                messagesStore: conversationId,\n                socket,\n            });\n            if (!this.privateMessages[conversationId])\n                this.privateMessages[conversationId] = [];\n            this.privateMessages[conversationId].push(message);\n            if (window.location.pathname === `/${conversationId}`)\n                this.setState({\n                    messages: this.privateMessages[conversationId],\n                    currentSocket: socket\n                });\n        });\n        socket.on('privateMessage', (message) => {\n            console.log('Websocket: broadcast from \\'privateMessage\\' channel:', message);\n            if (!this.privateMessages[conversationId])\n                this.privateMessages[conversationId] = [];\n            this.privateMessages[conversationId].push(message);\n            if (window.location.pathname === `/${conversationId}`)\n                this.setState({\n                    messages: this.privateMessages[conversationId],\n                });\n        });\n        socket.on('demolished', (message) => {\n            console.log('Websocket: broadcast from \\'demolished\\' channel:', message);\n            this.privateMessages[conversationId].push(message);\n            if (window.location.pathname === `/${conversationId}`)\n                this.setState({\n                    messages: this.privateMessages[conversationId],\n                });\n        });\n    };\n    sendToServer = (text) => {\n        const cookies = new Cookies();\n        let message = {\n            data: {\n                nickname: cookies.get('nickname'),\n                avatar: cookies.get('avatar')\n            },\n            text\n        };\n        console.log('BEFORE SEND', message);\n        this.state.currentSocket.emit('message', message);\n    };\n    updateNav = (nav) => {\n        for (let navSaved of this.state.nav) {\n            if (navSaved.messagesStore === nav.messagesStore)\n                return;\n        }\n        this.setState({nav: this.state.nav.concat(nav)})\n    };\n\n    handleClickNav = (itemId, item) => {\n        if (item.messagesStore === this._ROOM_MESSAGE_STORE)\n            this.setState({\n                messages: this.roomMessages\n            });\n        else this.setState({\n            messages: this.privateMessages[item.messagesStore]\n        });\n        this.setState({currentSocket: item.socket});\n        // document.querySelector(`#${itemId}`).style.border = 'black 1px solid';\n    };\n\n    render() {\n        const nav = this.state.nav.map((item, i) => {\n            return <Link to={item.navName === this._ROOM_NAV_NAME? '/': `/${item.messagesStore}`} className=\"nav-item nav-link\" key={i}\n                         onClick={() => this.handleClickNav(item.messagesStore, item)}>{item.navName}</Link>\n        });\n        const usersOnline = this.state.usersOnline.map((user, i) => {\n            user.nickname += user.id === this.state.sessionId && user.nickname.indexOf('(Вы)') === -1? ' (Вы)': '';\n\n            return <UserOnline key={i} user={user} sessionId={this.state.sessionId} roomName={this._ROOM_NAV_NAME}\n                               connectToPrivate={this.connectToPrivate} />\n        });\n        return(\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <a className=\"navbar-brand\" href=\"#\">\n                        <h3>Chat</h3>\n                    </a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\"\n                            aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                        <div className=\"navbar-nav\">\n                            {nav}\n                        </div>\n                    </div>\n                </nav>\n                <Login connectToRoom={this.connectToRoom}/>\n                <div className='usersOnlineStyle'>\n                    <p style={{fontWeight: 'bold'}}>Пользователи в комнате \"{this._ROOM_NAV_NAME}\": </p>\n                    {usersOnline}\n                </div>\n                <Messages messages={this.state.messages}/>\n                <ChatInput sendToServer={this.sendToServer} />\n            </div>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}